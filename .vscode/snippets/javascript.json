{
    "Odoo JS Widget": {
        "prefix": "odoo-js-widget",
        "body": [
            "/** @odoo-module **/",
            "",
            "import { Component } from \"@odoo/owl\";",
            "import { registry } from \"@web/core/registry\";",
            "",
            "export class ${1:WidgetName} extends Component {",
            "    static template = \"${2:module}.${1}\";",
            "    static props = {",
            "        ${3:prop}: { type: ${4:String}, optional: ${5:false} },",
            "    };",
            "",
            "    setup() {",
            "        super.setup();",
            "        ${6:// Setup logic}",
            "    }",
            "",
            "    ${7:methodName}() {",
            "        ${8:// Widget logic}",
            "    }",
            "}",
            "",
            "registry.category(\"${9:fields}\").add(\"${10:widget_name}\", ${1});"
        ],
        "description": "Odoo OWL component widget with registry"
    },

    "Odoo JS Field Widget": {
        "prefix": "odoo-js-field",
        "body": [
            "/** @odoo-module **/",
            "",
            "import { registry } from \"@web/core/registry\";",
            "import { standardFieldProps } from \"@web/views/fields/standard_field_props\";",
            "import { Component } from \"@odoo/owl\";",
            "",
            "export class ${1:FieldWidget} extends Component {",
            "    static template = \"${2:module}.${1}\";",
            "    static props = {",
            "        ...standardFieldProps,",
            "        ${3:customProp}: { type: ${4:String}, optional: true },",
            "    };",
            "",
            "    get ${5:computedValue}() {",
            "        return this.props.record.data[this.props.name];",
            "    }",
            "",
            "    ${6:onClick}() {",
            "        ${7:// Field interaction logic}",
            "    }",
            "}",
            "",
            "registry.category(\"fields\").add(\"${8:field_widget_name}\", ${1});"
        ],
        "description": "Custom field widget for form views"
    },

    "Odoo JS Action": {
        "prefix": "odoo-js-action",
        "body": [
            "/** @odoo-module **/",
            "",
            "import { registry } from \"@web/core/registry\";",
            "import { Component } from \"@odoo/owl\";",
            "",
            "export class ${1:ActionName} extends Component {",
            "    static template = \"${2:module}.${1}\";",
            "",
            "    setup() {",
            "        this.orm = this.env.services.orm;",
            "        this.action = this.env.services.action;",
            "        ${3:// Setup services}",
            "    }",
            "",
            "    async ${4:performAction}() {",
            "        try {",
            "            const result = await this.orm.call(",
            "                \"${5:model.name}\",",
            "                \"${6:method_name}\",",
            "                [${7:args}],",
            "                {${8:kwargs}}",
            "            );",
            "            ${9:// Handle result}",
            "        } catch (error) {",
            "            console.error(\"Action failed:\", error);",
            "        }",
            "    }",
            "}",
            "",
            "registry.category(\"actions\").add(\"${10:action_name}\", ${1});"
        ],
        "description": "Custom JavaScript action with ORM calls"
    },

    "Odoo QWeb Template": {
        "prefix": "odoo-qweb-template",
        "body": [
            "<templates xml:space=\"preserve\">",
            "    <t t-name=\"${1:module.TemplateName}\" owl=\"1\">",
            "        <div class=\"${2:o_widget_class}\">",
            "            <h3 t-if=\"props.${3:title}\" t-esc=\"props.${3}\"/>",
            "            <div class=\"${4:content_class}\">",
            "                <t t-if=\"${5:condition}\">",
            "                    <p t-esc=\"${6:content}\"/>",
            "                </t>",
            "                <t t-else=\"\">",
            "                    <p>${7:Default content}</p>",
            "                </t>",
            "            </div>",
            "            <button t-on-click=\"${8:onClick}\" class=\"btn btn-primary\">",
            "                ${9:Button Text}",
            "            </button>",
            "        </div>",
            "    </t>",
            "</templates>"
        ],
        "description": "QWeb template with OWL syntax"
    },

    "Odoo JS Form Controller": {
        "prefix": "odoo-js-form-controller",
        "body": [
            "/** @odoo-module **/",
            "",
            "import { FormController } from \"@web/views/form/form_controller\";",
            "import { patch } from \"@web/core/utils/patch\";",
            "",
            "patch(FormController.prototype, \"${1:module}.FormController\", {",
            "",
            "    async ${2:customMethod}() {",
            "        ${3:// Custom form logic}",
            "        return super.${2}(...arguments);",
            "    },",
            "",
            "    async _onSave() {",
            "        ${4:// Pre-save logic}",
            "        const result = await super._onSave(...arguments);",
            "        ${5:// Post-save logic}",
            "        return result;",
            "    },",
            "",
            "});"
        ],
        "description": "Form controller patch for custom behavior"
    },

    "Odoo JS List Controller": {
        "prefix": "odoo-js-list-controller",
        "body": [
            "/** @odoo-module **/",
            "",
            "import { ListController } from \"@web/views/list/list_controller\";",
            "import { patch } from \"@web/core/utils/patch\";",
            "",
            "patch(ListController.prototype, \"${1:module}.ListController\", {",
            "",
            "    async ${2:customAction}() {",
            "        const selectedRecords = await this.getSelectedResIds();",
            "        if (selectedRecords.length === 0) {",
            "            this.notification.add(",
            "                \"${3:Please select at least one record}\",",
            "                { type: \"warning\" }",
            "            );",
            "            return;",
            "        }",
            "        ",
            "        ${4:// Custom list action logic}",
            "    },",
            "",
            "});"
        ],
        "description": "List controller patch with selection handling"
    },

    "Odoo JS Service": {
        "prefix": "odoo-js-service",
        "body": [
            "/** @odoo-module **/",
            "",
            "import { registry } from \"@web/core/registry\";",
            "",
            "export const ${1:serviceName} = {",
            "    dependencies: [\"${2:orm}\", \"${3:notification}\"],",
            "",
            "    start(env, { ${2}, ${3} }) {",
            "        return {",
            "            async ${4:methodName}(${5:params}) {",
            "                try {",
            "                    ${6:// Service logic}",
            "                    const result = await ${2}.call(",
            "                        \"${7:model.name}\",",
            "                        \"${8:method_name}\",",
            "                        [${5}]",
            "                    );",
            "                    return result;",
            "                } catch (error) {",
            "                    ${3}.add(\"${9:Operation failed}\", { type: \"danger\" });",
            "                    throw error;",
            "                }",
            "            },",
            "        };",
            "    },",
            "};",
            "",
            "registry.category(\"services\").add(\"${10:service_name}\", ${1});"
        ],
        "description": "Custom JavaScript service with dependencies"
    },

    "Odoo JS Dialog": {
        "prefix": "odoo-js-dialog",
        "body": [
            "/** @odoo-module **/",
            "",
            "import { Dialog } from \"@web/core/dialog/dialog\";",
            "import { Component } from \"@odoo/owl\";",
            "import { useService } from \"@web/core/utils/hooks\";",
            "",
            "export class ${1:DialogName} extends Component {",
            "    static template = \"${2:module}.${1}\";",
            "    static components = { Dialog };",
            "    static props = {",
            "        close: Function,",
            "        ${3:data}: Object,",
            "    };",
            "",
            "    setup() {",
            "        this.orm = useService(\"orm\");",
            "        this.notification = useService(\"notification\");",
            "    }",
            "",
            "    async ${4:confirm}() {",
            "        try {",
            "            ${5:// Dialog confirmation logic}",
            "            this.notification.add(\"${6:Operation completed}\", { type: \"success\" });",
            "            this.props.close();",
            "        } catch (error) {",
            "            this.notification.add(\"${7:Operation failed}\", { type: \"danger\" });",
            "        }",
            "    }",
            "",
            "    ${8:cancel}() {",
            "        this.props.close();",
            "    }",
            "}"
        ],
        "description": "Custom dialog component with actions"
    },

    "Odoo JS Kanban Controller": {
        "prefix": "odoo-js-kanban-controller",
        "body": [
            "/** @odoo-module **/",
            "",
            "import { KanbanController } from \"@web/views/kanban/kanban_controller\";",
            "import { patch } from \"@web/core/utils/patch\";",
            "",
            "patch(KanbanController.prototype, \"${1:module}.KanbanController\", {",
            "",
            "    async ${2:customKanbanAction}() {",
            "        ${3:// Custom kanban logic}",
            "        const activeIds = this.model.root.records.map(r => r.resId);",
            "        ",
            "        const result = await this.orm.call(",
            "            this.props.resModel,",
            "            \"${4:method_name}\",",
            "            [activeIds]",
            "        );",
            "        ",
            "        await this.model.load();",
            "        ${5:// Handle result}",
            "    },",
            "",
            "});"
        ],
        "description": "Kanban controller patch for custom actions"
    },

    "Odoo JS Systray Item": {
        "prefix": "odoo-js-systray",
        "body": [
            "/** @odoo-module **/",
            "",
            "import { Component } from \"@odoo/owl\";",
            "import { registry } from \"@web/core/registry\";",
            "import { useService } from \"@web/core/utils/hooks\";",
            "",
            "export class ${1:SystrayItem} extends Component {",
            "    static template = \"${2:module}.${1}\";",
            "",
            "    setup() {",
            "        this.orm = useService(\"orm\");",
            "        this.action = useService(\"action\");",
            "    }",
            "",
            "    async ${3:onClick}() {",
            "        ${4:// Systray item action}",
            "        await this.action.doAction({",
            "            type: \"ir.actions.act_window\",",
            "            res_model: \"${5:model.name}\",",
            "            view_mode: \"${6:tree,form}\",",
            "            views: [[false, \"list\"], [false, \"form\"]],",
            "            target: \"${7:current}\",",
            "        });",
            "    }",
            "}",
            "",
            "export const systrayItem = {",
            "    Component: ${1},",
            "};",
            "",
            "registry.category(\"systray\").add(\"${8:systray_item_name}\", systrayItem, { sequence: ${9:10} });"
        ],
        "description": "Systray item component with action"
    },

    "Odoo JS Tour": {
        "prefix": "odoo-js-tour",
        "body": [
            "/** @odoo-module **/",
            "",
            "import { registry } from \"@web/core/registry\";",
            "import { stepUtils } from \"@web_tour/tour_service/tour_utils\";",
            "",
            "registry.category(\"web_tour.tours\").add(\"${1:tour_name}\", {",
            "    test: true,",
            "    url: \"${2:/web}\",",
            "    steps: () => [",
            "        stepUtils.showAppsMenuItem(),",
            "        {",
            "            trigger: '.o_app[data-menu-xmlid=\"${3:module.menu_root}\"]',",
            "            content: \"${4:Open the application}\",",
            "            position: \"bottom\",",
            "        },",
            "        {",
            "            trigger: '.o_list_button_add',",
            "            content: \"${5:Create a new record}\",",
            "            position: \"bottom\",",
            "        },",
            "        {",
            "            trigger: 'input[name=\"name\"]',",
            "            content: \"${6:Enter a name}\",",
            "            position: \"right\",",
            "            run: \"text ${7:Test Record}\",",
            "        },",
            "        {",
            "            trigger: '.o_form_button_save',",
            "            content: \"${8:Save the record}\",",
            "            position: \"bottom\",",
            "        },",
            "        {",
            "            trigger: '.o_back_button',",
            "            content: \"${9:Go back to list}\",",
            "            position: \"bottom\",",
            "        },",
            "    ],",
            "});"
        ],
        "description": "Web tour for testing and onboarding"
    },

    "Odoo JS Report Widget": {
        "prefix": "odoo-js-report-widget",
        "body": [
            "/** @odoo-module **/",
            "",
            "import { Component } from \"@odoo/owl\";",
            "import { registry } from \"@web/core/registry\";",
            "import { useService } from \"@web/core/utils/hooks\";",
            "",
            "export class ${1:ReportWidget} extends Component {",
            "    static template = \"${2:module}.${1}\";",
            "",
            "    setup() {",
            "        this.orm = useService(\"orm\");",
            "        this.state = useState({",
            "            data: null,",
            "            loading: true,",
            "        });",
            "        ",
            "        onWillStart(async () => {",
            "            await this.loadData();",
            "        });",
            "    }",
            "",
            "    async loadData() {",
            "        this.state.loading = true;",
            "        try {",
            "            this.state.data = await this.orm.call(",
            "                \"${3:report.model}\",",
            "                \"${4:get_report_data}\",",
            "                [${5:params}]",
            "            );",
            "        } catch (error) {",
            "            console.error(\"Failed to load report data:\", error);",
            "        } finally {",
            "            this.state.loading = false;",
            "        }",
            "    }",
            "",
            "    async ${6:refreshData}() {",
            "        await this.loadData();",
            "    }",
            "}",
            "",
            "registry.category(\"dashboard\").add(\"${7:report_widget_name}\", ${1});"
        ],
        "description": "Dashboard report widget with data loading"
    }
}
