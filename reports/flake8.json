json
import json
^
json
import os
^
json
import sys
^
json
    def parse_model_file(self, file_path: Path) -> None:
    ^
json
import os
^
json
    print(f"Success rate: {(passed/total)*100:.1f}%")
                                  ^
json
    print(f"Success rate: {(passed/total)*100:.1f}%")
                                         ^
json
    def validate_import_organization(self, imports: List[Tuple[str, int, str]], file_path: Path) -> bool:
    ^
json
import os
^
json
from typing import Any, Dict, List, Optional, Set, Tuple, Union
^
json
from typing import Any, Dict, List, Optional, Set, Tuple, Union
^
json
from typing import Any, Dict, List, Optional, Set, Tuple, Union
^
json
    def parse_manifest_file(self, manifest_path: Path) -> Optional[Dict[str, Any]]:
    ^
json
                except:
                ^
json
                f"Version '{version}' has only {len(version_parts)} part(s). Consider using at least major.minor format (e.g., '1.0')",
                                                                                                                        ^
json
            self.error(f"Manifest file not found: __manifest__.py", module_name, "file existence")
                       ^
json
    def validate_manifest(self, module_name: str) -> bool:
    ^
json
    def _extract_model_fields(self, content: str) -> Dict[str, Dict[str, Any]]:
    ^
json
                            f"(which is typically a Char field). Line {i+1}: {line.strip()}",
                                                                        ^
json
                            f"(usually Char fields). Line {i+1}: {line.strip()}",
                                                            ^
json
                    f"Computed field without store parameter may not be searchable. " f"Line {i+1}: {line.strip()}",
                                                                                               ^
json
                            f"Missing columns in access rights CSV: {', '.join(missing_columns)}. Found columns: {', '.join(header)}",
                                                                                                                        ^
json
                                f"{lines[line_num-1].strip()}",
                                                 ^
json
                        f"Line {line_num}: {lines[line_num-1].strip()}",
                                                          ^
json
    def _check_circular_imports(self, module_name: str) -> bool:
    ^
json
                        f"Invalid permission value '{value}' for {field}. Use: {', '.join(self.VALID_PERMISSION_VALUES)}",
                                                                                                                        ^
6     C901 'OdooTypeChecker.parse_model_file' is too complex (13)
7     E226 missing whitespace around arithmetic operator
3     E501 line too long (135 > 120 characters)
1     E722 do not use bare 'except'
8     F401 'json' imported but unused
1     F541 f-string is missing placeholders
