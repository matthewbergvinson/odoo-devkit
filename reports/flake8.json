json
{
^
json
import json
^
json
            stats['state_counts'][state] = len(examples.filtered(lambda x: x.state == state))
                                                                                      ^
json
        with self.assertRaises(Exception):
        ^
json
"""
Debugpy Configuration Helper for Odoo Development

This script helps configure debugpy in Odoo code for remote debugging.
Usage examples:

1. Add to your Odoo module __init__.py:
   from scripts.debugpy_config import start_debugpy
   start_debugpy()

2. Add breakpoint in your code:
   from scripts.debugpy_config import debug_here
   debug_here()
"""
^
json
"""
Debugpy Configuration Helper for Odoo Development

This script helps configure debugpy in Odoo code for remote debugging.
Usage examples:

1. Add to your Odoo module __init__.py:
   from scripts.debugpy_config import start_debugpy
   start_debugpy()

2. Add breakpoint in your code:
   from scripts.debugpy_config import debug_here
   debug_here()
"""
^
json
import os
^
json
import sys
^
json
    """
    Start debugpy server for remote debugging

    Args:
        port (int): Port to listen on (default: 5678)
        wait_for_client (bool): Whether to wait for client before continuing
    """
^
json
    """
    Start debugpy server for remote debugging

    Args:
        port (int): Port to listen on (default: 5678)
        wait_for_client (bool): Whether to wait for client before continuing
    """
^
json
    """
    Set a breakpoint at this location and start debugpy if not already running

    Args:
        port (int): Port to listen on (default: 5678)
    """
^
json
    """
    Set a breakpoint at this location and start debugpy if not already running

    Args:
        port (int): Port to listen on (default: 5678)
    """
^
json
    """Check if we're currently in a debugging session"""
^
json
"""
Format Odoo XML files for consistent style.
"""
^
json
"""
Format Odoo XML files for consistent style.
"""
^
json
import xml.etree.ElementTree as ET
 ^
json
"""
Custom Odoo Type Checker

This script performs additional type checking specifically for Odoo field
definitions and relationships to catch type mismatches that can cause
deployment failures.

Usage:
    python scripts/odoo-type-checker.py [module_name]
"""
^
json
"""
Custom Odoo Type Checker

This script performs additional type checking specifically for Odoo field
definitions and relationships to catch type mismatches that can cause
deployment failures.

Usage:
    python scripts/odoo-type-checker.py [module_name]
"""
^
json
    def __init__(self):
^
json
        """Check a single field definition for type consistency."""
^
json
        """Check if a related field type matches its source field type."""
^
json
    def parse_model_file(self, file_path: Path) -> None:
    ^
json
"""
Test Coverage Setup Validation Script
Task 4.5: Implement test coverage reporting with coverage.py

This script validates our coverage setup without requiring full Odoo installation.
It tests our fixture system and coverage configuration independently.
"""
^
json
"""
Test Coverage Setup Validation Script
Task 4.5: Implement test coverage reporting with coverage.py

This script validates our coverage setup without requiring full Odoo installation.
It tests our fixture system and coverage configuration independently.
"""
^
json
"""
Test Coverage Setup Validation Script
Task 4.5: Implement test coverage reporting with coverage.py

This script validates our coverage setup without requiring full Odoo installation.
It tests our fixture system and coverage configuration independently.
"""
^
json
import os
^
json
    """Test if coverage.py is properly installed"""
^
json
    """Test if .coveragerc configuration is valid"""
^
json
    """Test if our fixture modules can be imported"""
^
json
    """Test if our Makefile coverage targets are available"""
^
json
    """Test a simple coverage run on our fixture files"""
^
json
    """Test if HTML report directory structure is correct"""
^
json
    """Run all coverage setup validation tests"""
^
json
    print(f"Success rate: {(passed/total)*100:.1f}%")
                                  ^
json
    print(f"Success rate: {(passed/total)*100:.1f}%")
                                         ^
json
"""
Odoo Python Import Validation Script
Royal Textiles Project - Local Testing Infrastructure

This script provides comprehensive validation of Python imports in Odoo modules,
detecting circular imports, invalid paths, unused imports, and Odoo-specific
import patterns.

Key Features:
- Circular import detection
- Invalid import path validation
- Unused import detection
- Odoo-specific import pattern validation
- Deprecated import pattern detection
- Missing dependency detection
- Import organization validation

Usage:
    python scripts/validate-imports.py [module_name]
    python scripts/validate-imports.py  # validates all modules
"""
^
json
"""
Odoo Python Import Validation Script
Royal Textiles Project - Local Testing Infrastructure

This script provides comprehensive validation of Python imports in Odoo modules,
detecting circular imports, invalid paths, unused imports, and Odoo-specific
import patterns.

Key Features:
- Circular import detection
- Invalid import path validation
- Unused import detection
- Odoo-specific import pattern validation
- Deprecated import pattern detection
- Missing dependency detection
- Import organization validation

Usage:
    python scripts/validate-imports.py [module_name]
    python scripts/validate-imports.py  # validates all modules
"""
^
json
"""
Odoo Python Import Validation Script
Royal Textiles Project - Local Testing Infrastructure

This script provides comprehensive validation of Python imports in Odoo modules,
detecting circular imports, invalid paths, unused imports, and Odoo-specific
import patterns.

Key Features:
- Circular import detection
- Invalid import path validation
- Unused import detection
- Odoo-specific import pattern validation
- Deprecated import pattern detection
- Missing dependency detection
- Import organization validation

Usage:
    python scripts/validate-imports.py [module_name]
    python scripts/validate-imports.py  # validates all modules
"""
^
json
    def __init__(self, base_path: str = "custom_modules"):
^
json
            for import_path, line_num, import_type in addons_imports:
                                       ^
json
            def visit_Name(self, node):
                 ^
json
            def visit_Attribute(self, node):
                 ^
json
    def validate_import_organization(self, imports: List[Tuple[str, int, str]], file_path: Path) -> bool:
    ^
json
"""
Odoo Manifest Validation Script
Royal Textiles Project - Local Testing Infrastructure

This script provides comprehensive validation of __manifest__.py files to ensure
they meet Odoo 18.0 requirements and best practices. It catches common manifest
errors that can prevent module installation or cause deployment failures.

Key Features:
- Robust parsing that handles various manifest formats
- Comprehensive field validation for Odoo 18.0
- Version format validation
- Dependency analysis and recommendations
- Data file validation
- License and author validation
- Category validation with Odoo standard categories

Usage:
    python scripts/validate-manifest.py [module_name]
    python scripts/validate-manifest.py  # validates all modules
"""
^
json
"""
Odoo Manifest Validation Script
Royal Textiles Project - Local Testing Infrastructure

This script provides comprehensive validation of __manifest__.py files to ensure
they meet Odoo 18.0 requirements and best practices. It catches common manifest
errors that can prevent module installation or cause deployment failures.

Key Features:
- Robust parsing that handles various manifest formats
- Comprehensive field validation for Odoo 18.0
- Version format validation
- Dependency analysis and recommendations
- Data file validation
- License and author validation
- Category validation with Odoo standard categories

Usage:
    python scripts/validate-manifest.py [module_name]
    python scripts/validate-manifest.py  # validates all modules
"""
^
json
"""
Odoo Manifest Validation Script
Royal Textiles Project - Local Testing Infrastructure

This script provides comprehensive validation of __manifest__.py files to ensure
they meet Odoo 18.0 requirements and best practices. It catches common manifest
errors that can prevent module installation or cause deployment failures.

Key Features:
- Robust parsing that handles various manifest formats
- Comprehensive field validation for Odoo 18.0
- Version format validation
- Dependency analysis and recommendations
- Data file validation
- License and author validation
- Category validation with Odoo standard categories

Usage:
    python scripts/validate-manifest.py [module_name]
    python scripts/validate-manifest.py  # validates all modules
"""
^
json
import os
^
json
from typing import Any, Dict, List, Optional, Set, Tuple, Union
^
json
from typing import Any, Dict, List, Optional, Set, Tuple, Union
^
json
from typing import Any, Dict, List, Optional, Set, Tuple, Union
^
json
    def __init__(self, base_path: str = "custom_modules"):
^
json
    def parse_manifest_file(self, manifest_path: Path) -> Optional[Dict[str, Any]]:
    ^
json
        """
        Robustly parse a __manifest__.py file.

        Handles multiple formats:
        1. Dictionary-only format: # -*- coding: utf-8 -*- \n { ... }
        2. Explicit variable: __manifest__ = {...}
        3. Module-style with imports and complex expressions
        """
^
json
        """
        Robustly parse a __manifest__.py file.

        Handles multiple formats:
        1. Dictionary-only format: # -*- coding: utf-8 -*- \n { ... }
        2. Explicit variable: __manifest__ = {...}
        3. Module-style with imports and complex expressions
        """
^
json
                except:
                ^
json
                except:
                ^
json
                f"Version '{version}' has only {len(version_parts)} part(s). Consider using at least major.minor format (e.g., '1.0')",
                                                                                                                        ^
json
            self.error(f"Manifest file not found: __manifest__.py", module_name, "file existence")
                       ^
json
"""
Odoo Module Validation Script for RTP Denver

This script validates Odoo module structure, syntax, and common patterns
to catch errors before deployment. It would have caught the field type
mismatch error we encountered earlier.

Usage:
    python scripts/validate-module.py [module_name]
    python scripts/validate-module.py  # validates all modules
"""
^
json
"""
Odoo Module Validation Script for RTP Denver

This script validates Odoo module structure, syntax, and common patterns
to catch errors before deployment. It would have caught the field type
mismatch error we encountered earlier.

Usage:
    python scripts/validate-module.py [module_name]
    python scripts/validate-module.py  # validates all modules
"""
^
json
import xml.etree.ElementTree as ET
 ^
json
    def __init__(self, base_path: str = "custom_modules"):
^
json
    def validate_manifest(self, module_name: str) -> bool:
    ^
json
        """Validate model inheritance patterns - Critical for preventing
        deployment errors."""
^
json
        """Validate model inheritance patterns - Critical for preventing
        deployment errors."""
^
json
        """Validate model inheritance patterns - Critical for preventing
        deployment errors."""
^
json
    def _extract_model_fields(self, content: str) -> Dict[str, Dict[str, Any]]:
    ^
json
        """Validate related field type compatibility - This would have
        caught our error!"""
^
json
        """Validate related field type compatibility - This would have
        caught our error!"""
^
json
        """Validate related field type compatibility - This would have
        caught our error!"""
^
json
        for model_name, model_fields in COMMON_MODEL_FIELDS.items():
            ^
json
                            f"(which is typically a Char field). Line {i+1}: {line.strip()}",
                                                                        ^
json
                            f"(usually Char fields). Line {i+1}: {line.strip()}",
                                                            ^
json
                    f"Computed field without store parameter may not be searchable. " f"Line {i+1}: {line.strip()}",
                                                                                               ^
json
                            f"Missing columns in access rights CSV: {', '.join(missing_columns)}. Found columns: {', '.join(header)}",
                                                                                                                        ^
json
                                f"{lines[line_num-1].strip()}",
                                                 ^
json
                        f"Line {line_num}: {lines[line_num-1].strip()}",
                                                          ^
json
    def _check_circular_imports(self, module_name: str) -> bool:
    ^
json
"""
Odoo Security File Validation Script
Royal Textiles Project - Local Testing Infrastructure

This script provides comprehensive validation of security files in Odoo modules,
including CSV access rights files, XML security rules, group definitions,
and security structure validation.

Key Features:
- CSV format and structure validation
- Access rights column validation
- Security rule XML validation
- Group definition validation
- Permission value validation
- Reference integrity checking
- Security file organization validation

Usage:
    python scripts/validate-security.py [module_name]
    python scripts/validate-security.py  # validates all modules
"""
^
json
"""
Odoo Security File Validation Script
Royal Textiles Project - Local Testing Infrastructure

This script provides comprehensive validation of security files in Odoo modules,
including CSV access rights files, XML security rules, group definitions,
and security structure validation.

Key Features:
- CSV format and structure validation
- Access rights column validation
- Security rule XML validation
- Group definition validation
- Permission value validation
- Reference integrity checking
- Security file organization validation

Usage:
    python scripts/validate-security.py [module_name]
    python scripts/validate-security.py  # validates all modules
"""
^
json
"""
Odoo Security File Validation Script
Royal Textiles Project - Local Testing Infrastructure

This script provides comprehensive validation of security files in Odoo modules,
including CSV access rights files, XML security rules, group definitions,
and security structure validation.

Key Features:
- CSV format and structure validation
- Access rights column validation
- Security rule XML validation
- Group definition validation
- Permission value validation
- Reference integrity checking
- Security file organization validation

Usage:
    python scripts/validate-security.py [module_name]
    python scripts/validate-security.py  # validates all modules
"""
^
json
import xml.etree.ElementTree as ET
 ^
json
    def __init__(self, base_path: str = "custom_modules"):
^
json
                        f"Invalid permission value '{value}' for {field}. Use: {', '.join(self.VALID_PERMISSION_VALUES)}",
                                                                                                                        ^
json
"""
Odoo XML Validation Script
Royal Textiles Project - Local Testing Infrastructure

This script provides comprehensive validation of XML files in Odoo modules,
including views, security files, and data files. It checks for XML syntax
errors and validates Odoo-specific structure requirements.

Key Features:
- XML syntax validation
- Odoo root element validation (<odoo>)
- Record structure validation
- Field and attribute validation
- Security file structure validation
- View structure validation for forms, trees, kanban, etc.
- Menu and action validation
- Data file structure validation

Usage:
    python scripts/validate-xml.py [module_name]
    python scripts/validate-xml.py  # validates all modules
"""
^
json
"""
Odoo XML Validation Script
Royal Textiles Project - Local Testing Infrastructure

This script provides comprehensive validation of XML files in Odoo modules,
including views, security files, and data files. It checks for XML syntax
errors and validates Odoo-specific structure requirements.

Key Features:
- XML syntax validation
- Odoo root element validation (<odoo>)
- Record structure validation
- Field and attribute validation
- Security file structure validation
- View structure validation for forms, trees, kanban, etc.
- Menu and action validation
- Data file structure validation

Usage:
    python scripts/validate-xml.py [module_name]
    python scripts/validate-xml.py  # validates all modules
"""
^
json
"""
Odoo XML Validation Script
Royal Textiles Project - Local Testing Infrastructure

This script provides comprehensive validation of XML files in Odoo modules,
including views, security files, and data files. It checks for XML syntax
errors and validates Odoo-specific structure requirements.

Key Features:
- XML syntax validation
- Odoo root element validation (<odoo>)
- Record structure validation
- Field and attribute validation
- Security file structure validation
- View structure validation for forms, trees, kanban, etc.
- Menu and action validation
- Data file structure validation

Usage:
    python scripts/validate-xml.py [module_name]
    python scripts/validate-xml.py  # validates all modules
"""
^
json
import xml.etree.ElementTree as ET
 ^
json
    def __init__(self, base_path: str = "custom_modules"):
^
1     B001 Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer excepting specific exceptions  If you're sure what you're doing, be explicit and write `except BaseException:`.
2     B007 Loop control variable 'import_type' not used within the loop body. If this is intended, start the name with an underscore.
1     B017 `assertRaises(Exception)` and `pytest.raises(Exception)` should be considered evil. They can lead to your test passing even if the code being tested is never executed due to a typo. Assert for a more specific exception (builtin or custom), or use `assertRaisesRegex` (if using `assertRaises`), or add the `match` keyword argument (if using `pytest.raises`), or use the context manager form with a target.
1     B018 Found useless Dict expression. Consider either assigning it to a variable or removing it.
1     B023 Function definition does not bind loop variable 'state'.
6     C901 'OdooTypeChecker.parse_model_file' is too complex (13)
6     D107 Missing docstring in __init__
1     D200 One-line docstring should fit on one line with quotes
2     D202 No blank lines allowed after function docstring
7     D205 1 blank line required between summary line and description
2     D209 Multi-line docstring closing quotes should be on a separate line
12    D212 Multi-line docstring summary should start at the first line
1     D301 Use r""" if any backslashes in a docstring
20    D415 First line should end with a period, question mark, or exclamation point
7     E226 missing whitespace around arithmetic operator
3     E501 line too long (135 > 120 characters)
1     E722 do not use bare 'except'
8     F401 'json' imported but unused
1     F541 f-string is missing placeholders
2     N802 function name 'visit_Name' should be lowercase
4     N817 camelcase 'xml.etree.ElementTree' imported as acronym 'ET'
