<?xml-stylesheet type="text/xsl" href="../../mypy-html.xslt"?><mypy-report-file name="scripts/validate-module.py" module="scripts.validate-module"><line any_info="No Anys on this line!" content="#!/usr/bin/env python3" number="1" precision="empty"/><line any_info="No Anys on this line!" content="&quot;&quot;&quot;" number="2" precision="empty"/><line any_info="No Anys on this line!" content="Odoo Module Validation Script for RTP Denver" number="3" precision="empty"/><line any_info="No Anys on this line!" content="" number="4" precision="empty"/><line any_info="No Anys on this line!" content="This script validates Odoo module structure, syntax, and common patterns" number="5" precision="empty"/><line any_info="No Anys on this line!" content="to catch errors before deployment. It would have caught the field type" number="6" precision="empty"/><line any_info="No Anys on this line!" content="mismatch error we encountered earlier." number="7" precision="empty"/><line any_info="No Anys on this line!" content="" number="8" precision="empty"/><line any_info="No Anys on this line!" content="Usage:" number="9" precision="empty"/><line any_info="No Anys on this line!" content="    python scripts/validate-module.py [module_name]" number="10" precision="empty"/><line any_info="No Anys on this line!" content="    python scripts/validate-module.py  # validates all modules" number="11" precision="empty"/><line any_info="No Anys on this line!" content="&quot;&quot;&quot;" number="12" precision="empty"/><line any_info="No Anys on this line!" content="" number="13" precision="empty"/><line any_info="No Anys on this line!" content="import ast" number="14" precision="precise"/><line any_info="No Anys on this line!" content="import csv" number="15" precision="precise"/><line any_info="No Anys on this line!" content="import re" number="16" precision="precise"/><line any_info="No Anys on this line!" content="import sys" number="17" precision="precise"/><line any_info="No Anys on this line!" content="import xml.etree.ElementTree as ET" number="18" precision="precise"/><line any_info="No Anys on this line!" content="from pathlib import Path" number="19" precision="precise"/><line any_info="No Anys on this line!" content="from typing import Any, Dict, List, Set" number="20" precision="precise"/><line any_info="No Anys on this line!" content="" number="21" precision="empty"/><line any_info="No Anys on this line!" content="# Field type compatibility matrix for relationship validation" number="22" precision="empty"/><line any_info="No Anys on this line!" content="FIELD_TYPE_COMPATIBILITY = {" number="23" precision="precise"/><line any_info="No Anys on this line!" content="    'Char': ['Char', 'Text', 'Selection']," number="24" precision="precise"/><line any_info="No Anys on this line!" content="    'Text': ['Text', 'Html']," number="25" precision="precise"/><line any_info="No Anys on this line!" content="    'Integer': ['Integer', 'Float']," number="26" precision="precise"/><line any_info="No Anys on this line!" content="    'Float': ['Float', 'Integer']," number="27" precision="precise"/><line any_info="No Anys on this line!" content="    'Boolean': ['Boolean']," number="28" precision="precise"/><line any_info="No Anys on this line!" content="    'Date': ['Date', 'Datetime']," number="29" precision="precise"/><line any_info="No Anys on this line!" content="    'Datetime': ['Datetime', 'Date']," number="30" precision="precise"/><line any_info="No Anys on this line!" content="    'Binary': ['Binary']," number="31" precision="precise"/><line any_info="No Anys on this line!" content="    'Selection': ['Selection', 'Char']," number="32" precision="precise"/><line any_info="No Anys on this line!" content="    'Many2one': ['Many2one']," number="33" precision="precise"/><line any_info="No Anys on this line!" content="    'One2many': ['One2many']," number="34" precision="precise"/><line any_info="No Anys on this line!" content="    'Many2many': ['Many2many']," number="35" precision="precise"/><line any_info="No Anys on this line!" content="    'Html': ['Html', 'Text']," number="36" precision="precise"/><line any_info="No Anys on this line!" content="    'Monetary': ['Monetary', 'Float', 'Integer']," number="37" precision="precise"/><line any_info="No Anys on this line!" content="    'Reference': ['Reference']," number="38" precision="precise"/><line any_info="No Anys on this line!" content="}" number="39" precision="empty"/><line any_info="No Anys on this line!" content="" number="40" precision="empty"/><line any_info="No Anys on this line!" content="# Common Odoo model names and their typical field names" number="41" precision="empty"/><line any_info="No Anys on this line!" content="COMMON_MODEL_FIELDS = {" number="42" precision="precise"/><line any_info="No Anys on this line!" content="    'res.partner': {" number="43" precision="precise"/><line any_info="No Anys on this line!" content="        'name': 'Char'," number="44" precision="precise"/><line any_info="No Anys on this line!" content="        'email': 'Char'," number="45" precision="precise"/><line any_info="No Anys on this line!" content="        'phone': 'Char'," number="46" precision="precise"/><line any_info="No Anys on this line!" content="        'mobile': 'Char'," number="47" precision="precise"/><line any_info="No Anys on this line!" content="        'street': 'Char'," number="48" precision="precise"/><line any_info="No Anys on this line!" content="        'street2': 'Char'," number="49" precision="precise"/><line any_info="No Anys on this line!" content="        'city': 'Char'," number="50" precision="precise"/><line any_info="No Anys on this line!" content="        'zip': 'Char'," number="51" precision="precise"/><line any_info="No Anys on this line!" content="        'state_id': 'Many2one'," number="52" precision="precise"/><line any_info="No Anys on this line!" content="        'country_id': 'Many2one'," number="53" precision="precise"/><line any_info="No Anys on this line!" content="        'contact_address': 'Char',  # This would have caught our error!" number="54" precision="precise"/><line any_info="No Anys on this line!" content="        'is_company': 'Boolean'," number="55" precision="precise"/><line any_info="No Anys on this line!" content="        'supplier_rank': 'Integer'," number="56" precision="precise"/><line any_info="No Anys on this line!" content="        'customer_rank': 'Integer'," number="57" precision="precise"/><line any_info="No Anys on this line!" content="    }," number="58" precision="empty"/><line any_info="No Anys on this line!" content="    'sale.order': {" number="59" precision="precise"/><line any_info="No Anys on this line!" content="        'name': 'Char'," number="60" precision="precise"/><line any_info="No Anys on this line!" content="        'partner_id': 'Many2one'," number="61" precision="precise"/><line any_info="No Anys on this line!" content="        'date_order': 'Datetime'," number="62" precision="precise"/><line any_info="No Anys on this line!" content="        'state': 'Selection'," number="63" precision="precise"/><line any_info="No Anys on this line!" content="        'amount_total': 'Monetary'," number="64" precision="precise"/><line any_info="No Anys on this line!" content="        'currency_id': 'Many2one'," number="65" precision="precise"/><line any_info="No Anys on this line!" content="        'order_line': 'One2many'," number="66" precision="precise"/><line any_info="No Anys on this line!" content="    }," number="67" precision="empty"/><line any_info="No Anys on this line!" content="    'purchase.order': {" number="68" precision="precise"/><line any_info="No Anys on this line!" content="        'name': 'Char'," number="69" precision="precise"/><line any_info="No Anys on this line!" content="        'partner_id': 'Many2one'," number="70" precision="precise"/><line any_info="No Anys on this line!" content="        'date_order': 'Datetime'," number="71" precision="precise"/><line any_info="No Anys on this line!" content="        'state': 'Selection'," number="72" precision="precise"/><line any_info="No Anys on this line!" content="        'amount_total': 'Monetary'," number="73" precision="precise"/><line any_info="No Anys on this line!" content="        'currency_id': 'Many2one'," number="74" precision="precise"/><line any_info="No Anys on this line!" content="        'order_line': 'One2many'," number="75" precision="precise"/><line any_info="No Anys on this line!" content="    }," number="76" precision="empty"/><line any_info="No Anys on this line!" content="    'stock.picking': {" number="77" precision="precise"/><line any_info="No Anys on this line!" content="        'name': 'Char'," number="78" precision="precise"/><line any_info="No Anys on this line!" content="        'partner_id': 'Many2one'," number="79" precision="precise"/><line any_info="No Anys on this line!" content="        'location_id': 'Many2one'," number="80" precision="precise"/><line any_info="No Anys on this line!" content="        'location_dest_id': 'Many2one'," number="81" precision="precise"/><line any_info="No Anys on this line!" content="        'state': 'Selection'," number="82" precision="precise"/><line any_info="No Anys on this line!" content="        'move_lines': 'One2many'," number="83" precision="precise"/><line any_info="No Anys on this line!" content="    }," number="84" precision="empty"/><line any_info="No Anys on this line!" content="    'project.project': {" number="85" precision="precise"/><line any_info="No Anys on this line!" content="        'name': 'Char'," number="86" precision="precise"/><line any_info="No Anys on this line!" content="        'partner_id': 'Many2one'," number="87" precision="precise"/><line any_info="No Anys on this line!" content="        'user_id': 'Many2one'," number="88" precision="precise"/><line any_info="No Anys on this line!" content="        'date_start': 'Date'," number="89" precision="precise"/><line any_info="No Anys on this line!" content="        'date': 'Date'," number="90" precision="precise"/><line any_info="No Anys on this line!" content="        'task_ids': 'One2many'," number="91" precision="precise"/><line any_info="No Anys on this line!" content="    }," number="92" precision="empty"/><line any_info="No Anys on this line!" content="    'calendar.event': {" number="93" precision="precise"/><line any_info="No Anys on this line!" content="        'name': 'Char'," number="94" precision="precise"/><line any_info="No Anys on this line!" content="        'start': 'Datetime'," number="95" precision="precise"/><line any_info="No Anys on this line!" content="        'stop': 'Datetime'," number="96" precision="precise"/><line any_info="No Anys on this line!" content="        'user_id': 'Many2one'," number="97" precision="precise"/><line any_info="No Anys on this line!" content="        'partner_ids': 'Many2many'," number="98" precision="precise"/><line any_info="No Anys on this line!" content="        'location': 'Char'," number="99" precision="precise"/><line any_info="No Anys on this line!" content="        'description': 'Text'," number="100" precision="precise"/><line any_info="No Anys on this line!" content="    }," number="101" precision="empty"/><line any_info="No Anys on this line!" content="}" number="102" precision="empty"/><line any_info="No Anys on this line!" content="" number="103" precision="empty"/><line any_info="No Anys on this line!" content="" number="104" precision="empty"/><line any_info="No Anys on this line!" content="class ModuleValidator:" number="105" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;Validates Odoo module structure and content.&quot;&quot;&quot;" number="106" precision="empty"/><line any_info="No Anys on this line!" content="" number="107" precision="empty"/><line any_info="No Anys on this line!" content="    def __init__(self, base_path: str = &quot;custom_modules&quot;):" number="108" precision="precise"/><line any_info="No Anys on this line!" content="        self.base_path = Path(base_path)" number="109" precision="precise"/><line any_info="No Anys on this line!" content="        self.errors: List[str] = []" number="110" precision="precise"/><line any_info="No Anys on this line!" content="        self.warnings: List[str] = []" number="111" precision="precise"/><line any_info="No Anys on this line!" content="" number="112" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="    def error(self, message: str, module: str = &quot;&quot;, file: str = &quot;&quot;):" number="113" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Add an error message.&quot;&quot;&quot;" number="114" precision="empty"/><line any_info="No Anys on this line!" content="        location = f&quot;{module}/{file}&quot; if module and file else module or file" number="115" precision="precise"/><line any_info="No Anys on this line!" content="        self.errors.append(f&quot;ERROR: {location}: {message}&quot;)" number="116" precision="precise"/><line any_info="No Anys on this line!" content="" number="117" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="    def warning(self, message: str, module: str = &quot;&quot;, file: str = &quot;&quot;):" number="118" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Add a warning message.&quot;&quot;&quot;" number="119" precision="empty"/><line any_info="No Anys on this line!" content="        location = f&quot;{module}/{file}&quot; if module and file else module or file" number="120" precision="precise"/><line any_info="No Anys on this line!" content="        self.warnings.append(f&quot;WARNING: {location}: {message}&quot;)" number="121" precision="precise"/><line any_info="No Anys on this line!" content="" number="122" precision="empty"/><line any_info="No Anys on this line!" content="    def validate_all_modules(self) -&gt; bool:" number="123" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Validate all modules in the custom_modules directory.&quot;&quot;&quot;" number="124" precision="empty"/><line any_info="No Anys on this line!" content="        if not self.base_path.exists():" number="125" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.error(f&quot;Custom modules directory not found: {self.base_path}&quot;)" number="126" precision="any"/><line any_info="No Anys on this line!" content="            return False" number="127" precision="precise"/><line any_info="No Anys on this line!" content="" number="128" precision="empty"/><line any_info="No Anys on this line!" content="        modules = [d for d in self.base_path.iterdir() if d.is_dir() and not d.name.startswith('.')]" number="129" precision="precise"/><line any_info="No Anys on this line!" content="" number="130" precision="empty"/><line any_info="No Anys on this line!" content="        if not modules:" number="131" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.warning(&quot;No modules found in custom_modules directory&quot;)" number="132" precision="any"/><line any_info="No Anys on this line!" content="            return True" number="133" precision="precise"/><line any_info="No Anys on this line!" content="" number="134" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="135" precision="precise"/><line any_info="No Anys on this line!" content="        for module_dir in modules:" number="136" precision="precise"/><line any_info="No Anys on this line!" content="            if not self.validate_module(module_dir.name):" number="137" precision="precise"/><line any_info="No Anys on this line!" content="                success = False" number="138" precision="precise"/><line any_info="No Anys on this line!" content="" number="139" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="140" precision="precise"/><line any_info="No Anys on this line!" content="" number="141" precision="empty"/><line any_info="No Anys on this line!" content="    def validate_module(self, module_name: str) -&gt; bool:" number="142" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Validate a specific module.&quot;&quot;&quot;" number="143" precision="empty"/><line any_info="No Anys on this line!" content="        module_path = self.base_path / module_name" number="144" precision="precise"/><line any_info="No Anys on this line!" content="" number="145" precision="empty"/><line any_info="No Anys on this line!" content="        if not module_path.exists():" number="146" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.error(f&quot;Module directory not found: {module_name}&quot;)" number="147" precision="any"/><line any_info="No Anys on this line!" content="            return False" number="148" precision="precise"/><line any_info="No Anys on this line!" content="" number="149" precision="empty"/><line any_info="No Anys on this line!" content="        print(f&quot;Validating module: {module_name}&quot;)" number="150" precision="precise"/><line any_info="No Anys on this line!" content="" number="151" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="152" precision="precise"/><line any_info="No Anys on this line!" content="        success &amp;= self.validate_manifest(module_name)" number="153" precision="precise"/><line any_info="No Anys on this line!" content="        success &amp;= self.validate_python_files(module_name)" number="154" precision="precise"/><line any_info="No Anys on this line!" content="        success &amp;= self.validate_xml_files(module_name)" number="155" precision="precise"/><line any_info="No Anys on this line!" content="        success &amp;= self.validate_csv_files(module_name)" number="156" precision="precise"/><line any_info="No Anys on this line!" content="        success &amp;= self.validate_module_structure(module_name)" number="157" precision="precise"/><line any_info="No Anys on this line!" content="" number="158" precision="empty"/><line any_info="No Anys on this line!" content="        # NEW: Task 2.6 - Anti-pattern detection" number="159" precision="empty"/><line any_info="No Anys on this line!" content="        success &amp;= self.validate_anti_patterns(module_name)" number="160" precision="precise"/><line any_info="No Anys on this line!" content="" number="161" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="162" precision="precise"/><line any_info="No Anys on this line!" content="" number="163" precision="empty"/><line any_info="No Anys on this line!" content="    def validate_manifest(self, module_name: str) -&gt; bool:" number="164" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Validate __manifest__.py file.&quot;&quot;&quot;" number="165" precision="empty"/><line any_info="No Anys on this line!" content="        manifest_path = self.base_path / module_name / &quot;__manifest__.py&quot;" number="166" precision="precise"/><line any_info="No Anys on this line!" content="" number="167" precision="empty"/><line any_info="No Anys on this line!" content="        if not manifest_path.exists():" number="168" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.error(&quot;Missing __manifest__.py file&quot;, module_name)" number="169" precision="any"/><line any_info="No Anys on this line!" content="            return False" number="170" precision="precise"/><line any_info="No Anys on this line!" content="" number="171" precision="empty"/><line any_info="No Anys on this line!" content="        try:" number="172" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x7)&#10;Explicit (x1)" content="            with open(manifest_path, 'r') as f:" number="173" precision="precise"/><line any_info="No Anys on this line!" content="                content = f.read()" number="174" precision="precise"/><line any_info="No Anys on this line!" content="" number="175" precision="empty"/><line any_info="No Anys on this line!" content="            # Parse as Python AST to validate syntax" number="176" precision="empty"/><line any_info="No Anys on this line!" content="            try:" number="177" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x5)" content="                ast.parse(content)" number="178" precision="precise"/><line any_info="No Anys on this line!" content="            except SyntaxError as e:" number="179" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(f&quot;Syntax error in __manifest__.py: {e}&quot;, module_name)" number="180" precision="any"/><line any_info="No Anys on this line!" content="                return False" number="181" precision="precise"/><line any_info="No Anys on this line!" content="" number="182" precision="empty"/><line any_info="No Anys on this line!" content="            # Execute the manifest file to get the dictionary" number="183" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="            manifest_globals: dict = {}" number="184" precision="imprecise"/><line any_info="No Anys on this line!" content="            try:" number="185" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Omitted Generics (x2)" content="                exec(content, manifest_globals)" number="186" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="                if '__manifest__' in manifest_globals:" number="187" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x4)" content="                    manifest = manifest_globals['__manifest__']" number="188" precision="any"/><line any_info="No Anys on this line!" content="                else:" number="189" precision="empty"/><line any_info="No Anys on this line!" content="                    # Try to evaluate the content directly as a dictionary" number="190" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)&#10;Omitted Generics (x1)" content="                    manifest = eval(content)" number="191" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x19)" content="                    if not isinstance(manifest, dict):" number="192" precision="any"/><line any_info="No Anys on this line!" content="                        raise ValueError(&quot;Manifest is not a dictionary&quot;)" number="193" precision="precise"/><line any_info="No Anys on this line!" content="            except Exception as e:" number="194" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(f&quot;Could not parse __manifest__.py as dictionary: {e}&quot;, module_name, &quot;__manifest__.py&quot;)" number="195" precision="any"/><line any_info="No Anys on this line!" content="                return False" number="196" precision="precise"/><line any_info="No Anys on this line!" content="" number="197" precision="empty"/><line any_info="No Anys on this line!" content="            # Check required fields" number="198" precision="empty"/><line any_info="No Anys on this line!" content="            required_fields = ['name', 'version', 'depends', 'data']" number="199" precision="precise"/><line any_info="No Anys on this line!" content="            for field in required_fields:" number="200" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="                if field not in manifest:" number="201" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.error(f&quot;Missing required field '{field}' in manifest&quot;, module_name)" number="202" precision="any"/><line any_info="No Anys on this line!" content="" number="203" precision="empty"/><line any_info="No Anys on this line!" content="            # Check version format" number="204" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="            if 'version' in manifest:" number="205" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="                version = manifest['version']" number="206" precision="any"/><line any_info="No Anys on this line!" content="                pattern = r'^\d+\.\d+\.\d+\.\d+$'" number="207" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="                if not re.match(pattern, version):" number="208" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Omitted Generics (x1)" content="                    self.warning(f&quot;Version format should be X.Y.Z.W, got: {version}&quot;, module_name)" number="209" precision="any"/><line any_info="No Anys on this line!" content="" number="210" precision="empty"/><line any_info="No Anys on this line!" content="            # Check dependencies" number="211" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="            if 'depends' in manifest:" number="212" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x5)" content="                if not isinstance(manifest['depends'], list):" number="213" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.error(&quot;'depends' should be a list&quot;, module_name)" number="214" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="                elif 'base' not in manifest['depends']:" number="215" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.warning(&quot;'base' module not in dependencies&quot;, module_name)" number="216" precision="any"/><line any_info="No Anys on this line!" content="" number="217" precision="empty"/><line any_info="No Anys on this line!" content="        except Exception as e:" number="218" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.error(f&quot;Error reading __manifest__.py: {e}&quot;, module_name)" number="219" precision="any"/><line any_info="No Anys on this line!" content="            return False" number="220" precision="precise"/><line any_info="No Anys on this line!" content="" number="221" precision="empty"/><line any_info="No Anys on this line!" content="        return True" number="222" precision="precise"/><line any_info="No Anys on this line!" content="" number="223" precision="empty"/><line any_info="No Anys on this line!" content="    def validate_python_files(self, module_name: str) -&gt; bool:" number="224" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Validate Python files for syntax and Odoo patterns.&quot;&quot;&quot;" number="225" precision="empty"/><line any_info="No Anys on this line!" content="        module_path = self.base_path / module_name" number="226" precision="precise"/><line any_info="No Anys on this line!" content="        success = True" number="227" precision="precise"/><line any_info="No Anys on this line!" content="" number="228" precision="empty"/><line any_info="No Anys on this line!" content="        for py_file in module_path.rglob(&quot;*.py&quot;):" number="229" precision="precise"/><line any_info="No Anys on this line!" content="            rel_path = py_file.relative_to(module_path)" number="230" precision="precise"/><line any_info="No Anys on this line!" content="" number="231" precision="empty"/><line any_info="No Anys on this line!" content="            try:" number="232" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x7)&#10;Explicit (x1)" content="                with open(py_file, 'r') as f:" number="233" precision="precise"/><line any_info="No Anys on this line!" content="                    content = f.read()" number="234" precision="precise"/><line any_info="No Anys on this line!" content="" number="235" precision="empty"/><line any_info="No Anys on this line!" content="                # Check syntax" number="236" precision="empty"/><line any_info="No Anys on this line!" content="                try:" number="237" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x5)" content="                    ast.parse(content)" number="238" precision="precise"/><line any_info="No Anys on this line!" content="                except SyntaxError as e:" number="239" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.error(f&quot;Syntax error: {e}&quot;, module_name, str(rel_path))" number="240" precision="any"/><line any_info="No Anys on this line!" content="                    success = False" number="241" precision="precise"/><line any_info="No Anys on this line!" content="                    continue" number="242" precision="precise"/><line any_info="No Anys on this line!" content="" number="243" precision="empty"/><line any_info="No Anys on this line!" content="                # Validate model files" number="244" precision="empty"/><line any_info="No Anys on this line!" content="                if 'models/' in str(rel_path) and rel_path.name != '__init__.py':" number="245" precision="precise"/><line any_info="No Anys on this line!" content="                    success &amp;= self.validate_model_file(module_name, str(rel_path), content)" number="246" precision="precise"/><line any_info="No Anys on this line!" content="" number="247" precision="empty"/><line any_info="No Anys on this line!" content="            except Exception as e:" number="248" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(f&quot;Error reading {rel_path}: {e}&quot;, module_name)" number="249" precision="any"/><line any_info="No Anys on this line!" content="                success = False" number="250" precision="precise"/><line any_info="No Anys on this line!" content="" number="251" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="252" precision="precise"/><line any_info="No Anys on this line!" content="" number="253" precision="empty"/><line any_info="No Anys on this line!" content="    def validate_model_file(self, module_name: str, file_path: str, content: str) -&gt; bool:" number="254" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Validate Odoo model file for common patterns and errors.&quot;&quot;&quot;" number="255" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="256" precision="precise"/><line any_info="No Anys on this line!" content="        lines = content.split('\n')" number="257" precision="precise"/><line any_info="No Anys on this line!" content="" number="258" precision="empty"/><line any_info="No Anys on this line!" content="        # Check for proper imports" number="259" precision="empty"/><line any_info="No Anys on this line!" content="        has_odoo_import = any('from odoo import' in line for line in lines)" number="260" precision="precise"/><line any_info="No Anys on this line!" content="        if not has_odoo_import:" number="261" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.warning(&quot;No 'from odoo import' found&quot;, module_name, file_path)" number="262" precision="any"/><line any_info="No Anys on this line!" content="" number="263" precision="empty"/><line any_info="No Anys on this line!" content="        # Parse AST for detailed analysis" number="264" precision="empty"/><line any_info="No Anys on this line!" content="        try:" number="265" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x5)" content="            tree = ast.parse(content)" number="266" precision="precise"/><line any_info="No Anys on this line!" content="" number="267" precision="empty"/><line any_info="No Anys on this line!" content="            for node in ast.walk(tree):" number="268" precision="precise"/><line any_info="No Anys on this line!" content="                if isinstance(node, ast.ClassDef):" number="269" precision="precise"/><line any_info="No Anys on this line!" content="                    success &amp;= self.validate_model_class(module_name, file_path, node, content)" number="270" precision="precise"/><line any_info="No Anys on this line!" content="" number="271" precision="empty"/><line any_info="No Anys on this line!" content="        except Exception as e:" number="272" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.error(f&quot;Error parsing model file: {e}&quot;, module_name, file_path)" number="273" precision="any"/><line any_info="No Anys on this line!" content="            success = False" number="274" precision="precise"/><line any_info="No Anys on this line!" content="" number="275" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="276" precision="precise"/><line any_info="No Anys on this line!" content="" number="277" precision="empty"/><line any_info="No Anys on this line!" content="    def validate_model_class(self, module_name: str, file_path: str, class_node: ast.ClassDef, content: str) -&gt; bool:" number="278" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Validate Odoo model class definition.&quot;&quot;&quot;" number="279" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="280" precision="precise"/><line any_info="No Anys on this line!" content="" number="281" precision="empty"/><line any_info="No Anys on this line!" content="        # Check if it's a models.Model subclass" number="282" precision="empty"/><line any_info="No Anys on this line!" content="        is_model = False" number="283" precision="precise"/><line any_info="No Anys on this line!" content="        for base in class_node.bases:" number="284" precision="precise"/><line any_info="No Anys on this line!" content="            if isinstance(base, ast.Attribute) and hasattr(base, 'attr'):" number="285" precision="precise"/><line any_info="No Anys on this line!" content="                if base.attr == 'Model' or base.attr == 'TransientModel':" number="286" precision="precise"/><line any_info="No Anys on this line!" content="                    is_model = True" number="287" precision="precise"/><line any_info="No Anys on this line!" content="                    break" number="288" precision="precise"/><line any_info="No Anys on this line!" content="" number="289" precision="empty"/><line any_info="No Anys on this line!" content="        if not is_model:" number="290" precision="precise"/><line any_info="No Anys on this line!" content="            return True  # Not an Odoo model, skip validation" number="291" precision="precise"/><line any_info="No Anys on this line!" content="" number="292" precision="empty"/><line any_info="No Anys on this line!" content="        # Extract model attributes" number="293" precision="empty"/><line any_info="No Anys on this line!" content="        model_attrs = self._extract_model_attributes(class_node, content)" number="294" precision="precise"/><line any_info="No Anys on this line!" content="" number="295" precision="empty"/><line any_info="No Anys on this line!" content="        # Check for _name or _inherit attribute (both are valid for Odoo models)" number="296" precision="empty"/><line any_info="No Anys on this line!" content="        has_name_or_inherit = '_name' in model_attrs or '_inherit' in model_attrs" number="297" precision="precise"/><line any_info="No Anys on this line!" content="        if not has_name_or_inherit:" number="298" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.error(f&quot;Model class {class_node.name} missing _name or _inherit attribute&quot;, module_name, file_path)" number="299" precision="any"/><line any_info="No Anys on this line!" content="            success = False" number="300" precision="precise"/><line any_info="No Anys on this line!" content="" number="301" precision="empty"/><line any_info="No Anys on this line!" content="        # Validate model inheritance patterns" number="302" precision="empty"/><line any_info="No Anys on this line!" content="        success &amp;= self.validate_model_inheritance(module_name, file_path, class_node.name, model_attrs)" number="303" precision="precise"/><line any_info="No Anys on this line!" content="" number="304" precision="empty"/><line any_info="No Anys on this line!" content="        # Validate field definitions - Enhanced for Task 2.5" number="305" precision="empty"/><line any_info="No Anys on this line!" content="        success &amp;= self.validate_model_fields(module_name, file_path, class_node, content)" number="306" precision="precise"/><line any_info="No Anys on this line!" content="" number="307" precision="empty"/><line any_info="No Anys on this line!" content="        # NEW: Comprehensive relationship validation for Task 2.5" number="308" precision="empty"/><line any_info="No Anys on this line!" content="        success &amp;= self.validate_model_relationships(module_name, file_path, class_node, content, model_attrs)" number="309" precision="precise"/><line any_info="No Anys on this line!" content="" number="310" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="311" precision="precise"/><line any_info="No Anys on this line!" content="" number="312" precision="empty"/><line any_info="No Anys on this line!" content="    def _extract_model_attributes(self, class_node: ast.ClassDef, content: str) -&gt; Dict[str, str]:" number="313" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Extract model attributes like _name, _inherit, _description.&quot;&quot;&quot;" number="314" precision="empty"/><line any_info="No Anys on this line!" content="        attributes = {}" number="315" precision="precise"/><line any_info="No Anys on this line!" content="" number="316" precision="empty"/><line any_info="No Anys on this line!" content="        for node in class_node.body:" number="317" precision="precise"/><line any_info="No Anys on this line!" content="            if isinstance(node, ast.Assign):" number="318" precision="precise"/><line any_info="No Anys on this line!" content="                for target in node.targets:" number="319" precision="precise"/><line any_info="No Anys on this line!" content="                    if isinstance(target, ast.Name) and target.id.startswith('_'):" number="320" precision="precise"/><line any_info="No Anys on this line!" content="                        # Extract the value" number="321" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                        if isinstance(node.value, ast.Constant):" number="322" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                            attributes[target.id] = node.value.value" number="323" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                        elif isinstance(node.value, ast.Str):  # Python &lt; 3.8" number="324" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                            attributes[target.id] = node.value.s" number="325" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="326" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="        return attributes" number="327" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="328" precision="empty"/><line any_info="No Anys on this line!" content="    def validate_model_inheritance(" number="329" precision="precise"/><line any_info="No Anys on this line!" content="        self, module_name: str, file_path: str, class_name: str, model_attrs: Dict[str, str]" number="330" precision="empty"/><line any_info="No Anys on this line!" content="    ) -&gt; bool:" number="331" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Validate model inheritance patterns - Critical for preventing" number="332" precision="empty"/><line any_info="No Anys on this line!" content="        deployment errors.&quot;&quot;&quot;" number="333" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="334" precision="precise"/><line any_info="No Anys on this line!" content="" number="335" precision="empty"/><line any_info="No Anys on this line!" content="        has_name = '_name' in model_attrs" number="336" precision="precise"/><line any_info="No Anys on this line!" content="        has_inherit = '_inherit' in model_attrs" number="337" precision="precise"/><line any_info="No Anys on this line!" content="" number="338" precision="empty"/><line any_info="No Anys on this line!" content="        if has_name and has_inherit:" number="339" precision="precise"/><line any_info="No Anys on this line!" content="            # Both _name and _inherit means creating a new model that" number="340" precision="empty"/><line any_info="No Anys on this line!" content="            # inherits from another. This is valid but should be carefully" number="341" precision="empty"/><line any_info="No Anys on this line!" content="            # reviewed" number="342" precision="empty"/><line any_info="No Anys on this line!" content="            inherit_model = model_attrs['_inherit']" number="343" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.warning(" number="344" precision="any"/><line any_info="No Anys on this line!" content="                f&quot;Model {class_name} has both _name and _inherit. &quot;" number="345" precision="precise"/><line any_info="No Anys on this line!" content="                f&quot;This creates a new model inheriting from {inherit_model}. &quot;" number="346" precision="precise"/><line any_info="No Anys on this line!" content="                f&quot;Make sure this is intentional.&quot;," number="347" precision="empty"/><line any_info="No Anys on this line!" content="                module_name," number="348" precision="precise"/><line any_info="No Anys on this line!" content="                file_path," number="349" precision="precise"/><line any_info="No Anys on this line!" content="            )" number="350" precision="empty"/><line any_info="No Anys on this line!" content="" number="351" precision="empty"/><line any_info="No Anys on this line!" content="        elif has_inherit and not has_name:" number="352" precision="precise"/><line any_info="No Anys on this line!" content="            # Pure inheritance - extending existing model" number="353" precision="empty"/><line any_info="No Anys on this line!" content="            inherit_model = model_attrs['_inherit']" number="354" precision="precise"/><line any_info="No Anys on this line!" content="" number="355" precision="empty"/><line any_info="No Anys on this line!" content="            # Validate inherit model name format" number="356" precision="empty"/><line any_info="No Anys on this line!" content="            pattern = r'^[a-z][a-z0-9]*(\.[a-z][a-z0-9]*)*$'" number="357" precision="precise"/><line any_info="No Anys on this line!" content="            if not re.match(pattern, inherit_model):" number="358" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(" number="359" precision="any"/><line any_info="No Anys on this line!" content="                    f&quot;Invalid _inherit model name format: {inherit_model}. &quot;" number="360" precision="precise"/><line any_info="No Anys on this line!" content="                    f&quot;Should be lowercase with dots (e.g., 'sale.order')&quot;," number="361" precision="empty"/><line any_info="No Anys on this line!" content="                    module_name," number="362" precision="precise"/><line any_info="No Anys on this line!" content="                    file_path," number="363" precision="precise"/><line any_info="No Anys on this line!" content="                )" number="364" precision="empty"/><line any_info="No Anys on this line!" content="                success = False" number="365" precision="precise"/><line any_info="No Anys on this line!" content="" number="366" precision="empty"/><line any_info="No Anys on this line!" content="        elif has_name and not has_inherit:" number="367" precision="precise"/><line any_info="No Anys on this line!" content="            # New model creation" number="368" precision="empty"/><line any_info="No Anys on this line!" content="            model_name = model_attrs['_name']" number="369" precision="precise"/><line any_info="No Anys on this line!" content="" number="370" precision="empty"/><line any_info="No Anys on this line!" content="            # Validate model name format" number="371" precision="empty"/><line any_info="No Anys on this line!" content="            pattern = r'^[a-z][a-z0-9]*(\.[a-z][a-z0-9]*)+$'" number="372" precision="precise"/><line any_info="No Anys on this line!" content="            if not re.match(pattern, model_name):" number="373" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(" number="374" precision="any"/><line any_info="No Anys on this line!" content="                    f&quot;Invalid _name model format: {model_name}. &quot;" number="375" precision="precise"/><line any_info="No Anys on this line!" content="                    f&quot;Should be lowercase with dots (e.g., 'my.model.name')&quot;," number="376" precision="empty"/><line any_info="No Anys on this line!" content="                    module_name," number="377" precision="precise"/><line any_info="No Anys on this line!" content="                    file_path," number="378" precision="precise"/><line any_info="No Anys on this line!" content="                )" number="379" precision="empty"/><line any_info="No Anys on this line!" content="                success = False" number="380" precision="precise"/><line any_info="No Anys on this line!" content="" number="381" precision="empty"/><line any_info="No Anys on this line!" content="            # Check for potential overwriting of existing models" number="382" precision="empty"/><line any_info="No Anys on this line!" content="            if model_name in COMMON_MODEL_FIELDS:" number="383" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(" number="384" precision="any"/><line any_info="No Anys on this line!" content="                    f&quot;Model {class_name} trying to overwrite existing &quot;" number="385" precision="precise"/><line any_info="No Anys on this line!" content="                    f&quot;Odoo model {model_name}. &quot;" number="386" precision="precise"/><line any_info="No Anys on this line!" content="                    f&quot;Use _inherit instead of _name to extend models!&quot;," number="387" precision="empty"/><line any_info="No Anys on this line!" content="                    module_name," number="388" precision="precise"/><line any_info="No Anys on this line!" content="                    file_path," number="389" precision="precise"/><line any_info="No Anys on this line!" content="                )" number="390" precision="empty"/><line any_info="No Anys on this line!" content="                success = False" number="391" precision="precise"/><line any_info="No Anys on this line!" content="" number="392" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="393" precision="precise"/><line any_info="No Anys on this line!" content="" number="394" precision="empty"/><line any_info="No Anys on this line!" content="    def validate_model_relationships(" number="395" precision="precise"/><line any_info="No Anys on this line!" content="        self, module_name: str, file_path: str, class_node: ast.ClassDef, content: str, model_attrs: Dict[str, str]" number="396" precision="empty"/><line any_info="No Anys on this line!" content="    ) -&gt; bool:" number="397" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Comprehensive relationship validation for Task 2.5.&quot;&quot;&quot;" number="398" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="399" precision="precise"/><line any_info="No Anys on this line!" content="" number="400" precision="empty"/><line any_info="No Anys on this line!" content="        # Extract all field definitions in this model" number="401" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        model_fields = self._extract_model_fields(content)" number="402" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="403" precision="empty"/><line any_info="No Anys on this line!" content="        # Validate each relational field" number="404" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x4)" content="        for field_name, field_info in model_fields.items():" number="405" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="            if field_info['type'] in ['Many2one', 'One2many', 'Many2many']:" number="406" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                success &amp;= self._validate_relational_field(module_name, file_path, field_name, field_info, model_attrs)" number="407" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="408" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x6)&#10;Omitted Generics (x2)" content="            if field_info.get('related'):" number="409" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                success &amp;= self._validate_related_field(module_name, file_path, field_name, field_info, model_attrs)" number="410" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="411" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x6)&#10;Omitted Generics (x2)" content="            if field_info.get('compute'):" number="412" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                success &amp;= self._validate_computed_field(module_name, file_path, field_name, field_info, model_attrs)" number="413" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="414" precision="empty"/><line any_info="No Anys on this line!" content="        # Check for circular dependencies" number="415" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="        success &amp;= self._validate_dependency_cycles(module_name, file_path, model_fields, model_attrs)" number="416" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="417" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="418" precision="precise"/><line any_info="No Anys on this line!" content="" number="419" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="    def _extract_model_fields(self, content: str) -&gt; Dict[str, Dict[str, Any]]:" number="420" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Extract field definitions from model content.&quot;&quot;&quot;" number="421" precision="empty"/><line any_info="No Anys on this line!" content="        fields = {}" number="422" precision="precise"/><line any_info="No Anys on this line!" content="        lines = content.split('\n')" number="423" precision="precise"/><line any_info="No Anys on this line!" content="" number="424" precision="empty"/><line any_info="No Anys on this line!" content="        for i, line in enumerate(lines):" number="425" precision="precise"/><line any_info="No Anys on this line!" content="            # Match field definitions: field_name = fields.Type(...)" number="426" precision="empty"/><line any_info="No Anys on this line!" content="            pattern = r'(\w+)\s*=\s*fields\.(\w+)\s*\(([^)]*)\)'" number="427" precision="precise"/><line any_info="No Anys on this line!" content="            field_match = re.search(pattern, line)" number="428" precision="precise"/><line any_info="No Anys on this line!" content="            if field_match:" number="429" precision="precise"/><line any_info="No Anys on this line!" content="                field_name = field_match.group(1)" number="430" precision="precise"/><line any_info="No Anys on this line!" content="                field_type = field_match.group(2)" number="431" precision="precise"/><line any_info="No Anys on this line!" content="                field_params = field_match.group(3)" number="432" precision="precise"/><line any_info="No Anys on this line!" content="" number="433" precision="empty"/><line any_info="No Anys on this line!" content="                # Extract parameters" number="434" precision="empty"/><line any_info="No Anys on this line!" content="                field_info = {'type': field_type, 'line': i + 1, 'definition': line.strip()}" number="435" precision="precise"/><line any_info="No Anys on this line!" content="" number="436" precision="empty"/><line any_info="No Anys on this line!" content="                # Extract common parameters" number="437" precision="empty"/><line any_info="No Anys on this line!" content="                if 'string=' in field_params:" number="438" precision="precise"/><line any_info="No Anys on this line!" content="                    string_match = re.search(r'string=[\'&quot;]([^\'&quot;]*)[\'&quot;]', field_params)" number="439" precision="precise"/><line any_info="No Anys on this line!" content="                    if string_match:" number="440" precision="precise"/><line any_info="No Anys on this line!" content="                        field_info['string'] = string_match.group(1)" number="441" precision="precise"/><line any_info="No Anys on this line!" content="" number="442" precision="empty"/><line any_info="No Anys on this line!" content="                if 'related=' in field_params:" number="443" precision="precise"/><line any_info="No Anys on this line!" content="                    related_match = re.search(r'related=[\'&quot;]([^\'&quot;]*)[\'&quot;]', field_params)" number="444" precision="precise"/><line any_info="No Anys on this line!" content="                    if related_match:" number="445" precision="precise"/><line any_info="No Anys on this line!" content="                        field_info['related'] = related_match.group(1)" number="446" precision="precise"/><line any_info="No Anys on this line!" content="" number="447" precision="empty"/><line any_info="No Anys on this line!" content="                if 'comodel_name=' in field_params:" number="448" precision="precise"/><line any_info="No Anys on this line!" content="                    comodel_match = re.search(r'comodel_name=[\'&quot;]([^\'&quot;]*)[\'&quot;]', field_params)" number="449" precision="precise"/><line any_info="No Anys on this line!" content="                    if comodel_match:" number="450" precision="precise"/><line any_info="No Anys on this line!" content="                        field_info['comodel_name'] = comodel_match.group(1)" number="451" precision="precise"/><line any_info="No Anys on this line!" content="" number="452" precision="empty"/><line any_info="No Anys on this line!" content="                if 'compute=' in field_params:" number="453" precision="precise"/><line any_info="No Anys on this line!" content="                    compute_match = re.search(r'compute=[\'&quot;]([^\'&quot;]*)[\'&quot;]', field_params)" number="454" precision="precise"/><line any_info="No Anys on this line!" content="                    if compute_match:" number="455" precision="precise"/><line any_info="No Anys on this line!" content="                        field_info['compute'] = compute_match.group(1)" number="456" precision="precise"/><line any_info="No Anys on this line!" content="" number="457" precision="empty"/><line any_info="No Anys on this line!" content="                if 'inverse_name=' in field_params:" number="458" precision="precise"/><line any_info="No Anys on this line!" content="                    inverse_match = re.search(r'inverse_name=[\'&quot;]([^\'&quot;]*)[\'&quot;]', field_params)" number="459" precision="precise"/><line any_info="No Anys on this line!" content="                    if inverse_match:" number="460" precision="precise"/><line any_info="No Anys on this line!" content="                        field_info['inverse_name'] = inverse_match.group(1)" number="461" precision="precise"/><line any_info="No Anys on this line!" content="" number="462" precision="empty"/><line any_info="No Anys on this line!" content="                # For One2many, extract the second positional parameter" number="463" precision="empty"/><line any_info="No Anys on this line!" content="                # (inverse field)" number="464" precision="empty"/><line any_info="No Anys on this line!" content="                if field_type == 'One2many':" number="465" precision="precise"/><line any_info="No Anys on this line!" content="                    pattern = r'fields\.One2many\s*\(\s*' r'[\'&quot;]([^\'&quot;]*)[\'&quot;],\s*[\'&quot;]([^\'&quot;]*)[\'&quot;]'" number="466" precision="precise"/><line any_info="No Anys on this line!" content="                    o2m_match = re.search(pattern, line)" number="467" precision="precise"/><line any_info="No Anys on this line!" content="                    if o2m_match:" number="468" precision="precise"/><line any_info="No Anys on this line!" content="                        field_info['comodel_name'] = o2m_match.group(1)" number="469" precision="precise"/><line any_info="No Anys on this line!" content="                        field_info['inverse_name'] = o2m_match.group(2)" number="470" precision="precise"/><line any_info="No Anys on this line!" content="" number="471" precision="empty"/><line any_info="No Anys on this line!" content="                fields[field_name] = field_info" number="472" precision="precise"/><line any_info="No Anys on this line!" content="" number="473" precision="empty"/><line any_info="No Anys on this line!" content="        return fields" number="474" precision="precise"/><line any_info="No Anys on this line!" content="" number="475" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="    def _validate_relational_field(" number="476" precision="imprecise"/><line any_info="No Anys on this line!" content="        self, module_name: str, file_path: str, field_name: str, field_info: Dict[str, Any], model_attrs: Dict[str, str]" number="477" precision="empty"/><line any_info="No Anys on this line!" content="    ) -&gt; bool:" number="478" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Validate relational field definitions.&quot;&quot;&quot;" number="479" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="480" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        field_type = field_info['type']" number="481" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        line_num = field_info['line']" number="482" precision="any"/><line any_info="No Anys on this line!" content="" number="483" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="        if field_type == 'Many2one':" number="484" precision="any"/><line any_info="No Anys on this line!" content="            # Many2one should have comodel_name" number="485" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="            if 'comodel_name' not in field_info:" number="486" precision="imprecise"/><line any_info="No Anys on this line!" content="                # Extract from first parameter if not explicitly set" number="487" precision="empty"/><line any_info="No Anys on this line!" content="                pattern = r'fields\.Many2one\s*\(\s*[\'&quot;]([^\'&quot;]*)[\'&quot;]'" number="488" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                comodel_match = re.search(pattern, field_info['definition'])" number="489" precision="any"/><line any_info="No Anys on this line!" content="                if not comodel_match:" number="490" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.error(" number="491" precision="any"/><line any_info="No Anys on this line!" content="                        f&quot;Many2one field '{field_name}' missing comodel_name &quot;" number="492" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="                        f&quot;parameter. Line {line_num}: {field_info['definition']}&quot;," number="493" precision="any"/><line any_info="No Anys on this line!" content="                        module_name," number="494" precision="precise"/><line any_info="No Anys on this line!" content="                        file_path," number="495" precision="precise"/><line any_info="No Anys on this line!" content="                    )" number="496" precision="empty"/><line any_info="No Anys on this line!" content="                    success = False" number="497" precision="precise"/><line any_info="No Anys on this line!" content="                else:" number="498" precision="empty"/><line any_info="No Anys on this line!" content="                    comodel = comodel_match.group(1)" number="499" precision="precise"/><line any_info="No Anys on this line!" content="                    # Validate comodel name format" number="500" precision="empty"/><line any_info="No Anys on this line!" content="                    pattern = r'^[a-z][a-z0-9]*(\.[a-z][a-z0-9]*)*$'" number="501" precision="precise"/><line any_info="No Anys on this line!" content="                    if not re.match(pattern, comodel):" number="502" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                        self.error(" number="503" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="                            f&quot;Invalid comodel name format: {comodel}. &quot; f&quot;Line {line_num}: {field_info['definition']}&quot;," number="504" precision="any"/><line any_info="No Anys on this line!" content="                            module_name," number="505" precision="precise"/><line any_info="No Anys on this line!" content="                            file_path," number="506" precision="precise"/><line any_info="No Anys on this line!" content="                        )" number="507" precision="empty"/><line any_info="No Anys on this line!" content="                        success = False" number="508" precision="precise"/><line any_info="No Anys on this line!" content="" number="509" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="        elif field_type == 'One2many':" number="510" precision="any"/><line any_info="No Anys on this line!" content="            # One2many requires comodel and inverse_name" number="511" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="            missing_params = 'comodel_name' not in field_info or 'inverse_name' not in field_info" number="512" precision="imprecise"/><line any_info="No Anys on this line!" content="            if missing_params:" number="513" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(" number="514" precision="any"/><line any_info="No Anys on this line!" content="                    f&quot;One2many field '{field_name}' missing required &quot;" number="515" precision="precise"/><line any_info="No Anys on this line!" content="                    f&quot;parameters (comodel, inverse_name). &quot;" number="516" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="                    f&quot;Line {line_num}: {field_info['definition']}&quot;," number="517" precision="any"/><line any_info="No Anys on this line!" content="                    module_name," number="518" precision="precise"/><line any_info="No Anys on this line!" content="                    file_path," number="519" precision="precise"/><line any_info="No Anys on this line!" content="                )" number="520" precision="empty"/><line any_info="No Anys on this line!" content="                success = False" number="521" precision="precise"/><line any_info="No Anys on this line!" content="            else:" number="522" precision="empty"/><line any_info="No Anys on this line!" content="                # Validate inverse field naming convention" number="523" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="                inverse_name = field_info['inverse_name']" number="524" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x6)" content="                if not inverse_name.endswith('_id') and not inverse_name.endswith('_ids'):" number="525" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.warning(" number="526" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                        f&quot;One2many inverse field '{inverse_name}' should &quot;" number="527" precision="any"/><line any_info="No Anys on this line!" content="                        f&quot;typically end with '_id'. &quot;" number="528" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="                        f&quot;Line {line_num}: {field_info['definition']}&quot;," number="529" precision="any"/><line any_info="No Anys on this line!" content="                        module_name," number="530" precision="precise"/><line any_info="No Anys on this line!" content="                        file_path," number="531" precision="precise"/><line any_info="No Anys on this line!" content="                    )" number="532" precision="empty"/><line any_info="No Anys on this line!" content="" number="533" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="        elif field_type == 'Many2many':" number="534" precision="any"/><line any_info="No Anys on this line!" content="            # Many2many should have comodel_name" number="535" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="            if 'comodel_name' not in field_info:" number="536" precision="imprecise"/><line any_info="No Anys on this line!" content="                pattern = r'fields\.Many2many\s*\(\s*[\'&quot;]([^\'&quot;]*)[\'&quot;]'" number="537" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                comodel_match = re.search(pattern, field_info['definition'])" number="538" precision="any"/><line any_info="No Anys on this line!" content="                if not comodel_match:" number="539" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.error(" number="540" precision="any"/><line any_info="No Anys on this line!" content="                        f&quot;Many2many field '{field_name}' missing &quot;" number="541" precision="precise"/><line any_info="No Anys on this line!" content="                        f&quot;comodel_name parameter. &quot;" number="542" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="                        f&quot;Line {line_num}: {field_info['definition']}&quot;," number="543" precision="any"/><line any_info="No Anys on this line!" content="                        module_name," number="544" precision="precise"/><line any_info="No Anys on this line!" content="                        file_path," number="545" precision="precise"/><line any_info="No Anys on this line!" content="                    )" number="546" precision="empty"/><line any_info="No Anys on this line!" content="                    success = False" number="547" precision="precise"/><line any_info="No Anys on this line!" content="" number="548" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="549" precision="precise"/><line any_info="No Anys on this line!" content="" number="550" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="    def _validate_related_field(" number="551" precision="imprecise"/><line any_info="No Anys on this line!" content="        self, module_name: str, file_path: str, field_name: str, field_info: Dict[str, Any], model_attrs: Dict[str, str]" number="552" precision="empty"/><line any_info="No Anys on this line!" content="    ) -&gt; bool:" number="553" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Validate related field type compatibility - This would have" number="554" precision="empty"/><line any_info="No Anys on this line!" content="        caught our error!&quot;&quot;&quot;" number="555" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="556" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        related_path = field_info['related']" number="557" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        field_type = field_info['type']" number="558" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        line_num = field_info['line']" number="559" precision="any"/><line any_info="No Anys on this line!" content="" number="560" precision="empty"/><line any_info="No Anys on this line!" content="        # Split related path to analyze each step" number="561" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x4)" content="        path_parts = related_path.split('.')" number="562" precision="any"/><line any_info="No Anys on this line!" content="" number="563" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="        if len(path_parts) &lt; 2:" number="564" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.error(" number="565" precision="any"/><line any_info="No Anys on this line!" content="                f&quot;Related field '{field_name}' has invalid path &quot;" number="566" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                f&quot;'{related_path}'. Should be 'field.subfield' format. &quot;" number="567" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                f&quot;Line {line_num}&quot;," number="568" precision="any"/><line any_info="No Anys on this line!" content="                module_name," number="569" precision="precise"/><line any_info="No Anys on this line!" content="                file_path," number="570" precision="precise"/><line any_info="No Anys on this line!" content="            )" number="571" precision="empty"/><line any_info="No Anys on this line!" content="            return False" number="572" precision="precise"/><line any_info="No Anys on this line!" content="" number="573" precision="empty"/><line any_info="No Anys on this line!" content="        # Check if we know the target field type" number="574" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        target_field = path_parts[-1]" number="575" precision="any"/><line any_info="No Anys on this line!" content="" number="576" precision="empty"/><line any_info="No Anys on this line!" content="        # Check against known model fields" number="577" precision="empty"/><line any_info="No Anys on this line!" content="        for model_name, model_fields in COMMON_MODEL_FIELDS.items():" number="578" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="            if target_field in model_fields:" number="579" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                expected_type = model_fields[target_field]" number="580" precision="any"/><line any_info="No Anys on this line!" content="" number="581" precision="empty"/><line any_info="No Anys on this line!" content="                # Check type compatibility" number="582" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="                compatible_types = FIELD_TYPE_COMPATIBILITY.get(expected_type, [expected_type])" number="583" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                if field_type not in compatible_types:" number="584" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.error(" number="585" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                        f&quot;Field type mismatch: {field_type} field &quot;" number="586" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                        f&quot;'{field_name}' cannot be related to '{target_field}' &quot;" number="587" precision="any"/><line any_info="No Anys on this line!" content="                        f&quot;(typically {expected_type}). &quot;" number="588" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="                        f&quot;Line {line_num}: {field_info['definition']}&quot;," number="589" precision="any"/><line any_info="No Anys on this line!" content="                        module_name," number="590" precision="precise"/><line any_info="No Anys on this line!" content="                        file_path," number="591" precision="precise"/><line any_info="No Anys on this line!" content="                    )" number="592" precision="empty"/><line any_info="No Anys on this line!" content="                    success = False" number="593" precision="precise"/><line any_info="No Anys on this line!" content="                    break" number="594" precision="precise"/><line any_info="No Anys on this line!" content="" number="595" precision="empty"/><line any_info="No Anys on this line!" content="        # Specific checks for common field mismatches" number="596" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="        if field_type == 'Text':" number="597" precision="any"/><line any_info="No Anys on this line!" content="            text_incompatible = ['email', 'phone', 'mobile', 'zip', 'name', 'contact_address']" number="598" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="            if any(field in target_field.lower() for field in text_incompatible):" number="599" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(" number="600" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                    f&quot;Text field '{field_name}' related to '{target_field}' &quot;" number="601" precision="any"/><line any_info="No Anys on this line!" content="                    f&quot;is likely a type mismatch. These fields are typically &quot;" number="602" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                    f&quot;Char fields. Line {line_num}&quot;," number="603" precision="any"/><line any_info="No Anys on this line!" content="                    module_name," number="604" precision="precise"/><line any_info="No Anys on this line!" content="                    file_path," number="605" precision="precise"/><line any_info="No Anys on this line!" content="                )" number="606" precision="empty"/><line any_info="No Anys on this line!" content="                success = False" number="607" precision="precise"/><line any_info="No Anys on this line!" content="" number="608" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="        elif field_type == 'Char':" number="609" precision="any"/><line any_info="No Anys on this line!" content="            char_incompatible = ['description', 'note', 'comment']" number="610" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="            if any(field in target_field.lower() for field in char_incompatible):" number="611" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.warning(" number="612" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                    f&quot;Char field '{field_name}' related to '{target_field}' &quot;" number="613" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                    f&quot;might be better as Text. Line {line_num}&quot;," number="614" precision="any"/><line any_info="No Anys on this line!" content="                    module_name," number="615" precision="precise"/><line any_info="No Anys on this line!" content="                    file_path," number="616" precision="precise"/><line any_info="No Anys on this line!" content="                )" number="617" precision="empty"/><line any_info="No Anys on this line!" content="" number="618" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="619" precision="precise"/><line any_info="No Anys on this line!" content="" number="620" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="    def _validate_computed_field(" number="621" precision="imprecise"/><line any_info="No Anys on this line!" content="        self, module_name: str, file_path: str, field_name: str, field_info: Dict[str, Any], model_attrs: Dict[str, str]" number="622" precision="empty"/><line any_info="No Anys on this line!" content="    ) -&gt; bool:" number="623" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Validate computed field definitions.&quot;&quot;&quot;" number="624" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="625" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        compute_method = field_info['compute']" number="626" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        line_num = field_info['line']" number="627" precision="any"/><line any_info="No Anys on this line!" content="" number="628" precision="empty"/><line any_info="No Anys on this line!" content="        # Check compute method naming convention" number="629" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        if not compute_method.startswith('_compute_'):" number="630" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.warning(" number="631" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                f&quot;Compute method '{compute_method}' should start with &quot; f&quot;'_compute_'. Line {line_num}&quot;," number="632" precision="any"/><line any_info="No Anys on this line!" content="                module_name," number="633" precision="precise"/><line any_info="No Anys on this line!" content="                file_path," number="634" precision="precise"/><line any_info="No Anys on this line!" content="            )" number="635" precision="empty"/><line any_info="No Anys on this line!" content="" number="636" precision="empty"/><line any_info="No Anys on this line!" content="        # Check for store parameter on computed fields" number="637" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        definition = field_info['definition']" number="638" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="        if 'store=' not in definition and 'search=' not in definition:" number="639" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.warning(" number="640" precision="any"/><line any_info="No Anys on this line!" content="                f&quot;Computed field '{field_name}' without store parameter &quot;" number="641" precision="precise"/><line any_info="No Anys on this line!" content="                f&quot;may not be searchable. Consider adding store=True if &quot;" number="642" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                f&quot;field should be searchable. Line {line_num}&quot;," number="643" precision="any"/><line any_info="No Anys on this line!" content="                module_name," number="644" precision="precise"/><line any_info="No Anys on this line!" content="                file_path," number="645" precision="precise"/><line any_info="No Anys on this line!" content="            )" number="646" precision="empty"/><line any_info="No Anys on this line!" content="" number="647" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="648" precision="precise"/><line any_info="No Anys on this line!" content="" number="649" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="    def _validate_dependency_cycles(" number="650" precision="imprecise"/><line any_info="No Anys on this line!" content="        self, module_name: str, file_path: str, model_fields: Dict[str, Dict[str, Any]], model_attrs: Dict[str, str]" number="651" precision="empty"/><line any_info="No Anys on this line!" content="    ) -&gt; bool:" number="652" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Check for circular dependencies in field relationships.&quot;&quot;&quot;" number="653" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="654" precision="precise"/><line any_info="No Anys on this line!" content="" number="655" precision="empty"/><line any_info="No Anys on this line!" content="        # Build dependency graph for related fields" number="656" precision="empty"/><line any_info="No Anys on this line!" content="        dependencies = {}" number="657" precision="precise"/><line any_info="No Anys on this line!" content="" number="658" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x4)" content="        for field_name, field_info in model_fields.items():" number="659" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x6)&#10;Omitted Generics (x2)" content="            if field_info.get('related'):" number="660" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="                related_path = field_info['related']" number="661" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x5)" content="                first_field = related_path.split('.')[0]" number="662" precision="any"/><line any_info="No Anys on this line!" content="" number="663" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                if first_field != field_name:  # Avoid self-reference" number="664" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    if field_name not in dependencies:" number="665" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Omitted Generics (x3)" content="                        dependencies[field_name] = set()" number="666" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Explicit (x1)" content="                    dependencies[field_name].add(first_field)" number="667" precision="any"/><line any_info="No Anys on this line!" content="" number="668" precision="empty"/><line any_info="No Anys on this line!" content="        # Simple cycle detection" number="669" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        for start_field in dependencies:" number="670" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="            visited = set()" number="671" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            if self._has_cycle(start_field, dependencies, visited):" number="672" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.warning(" number="673" precision="any"/><line any_info="No Anys on this line!" content="                    f&quot;Potential circular dependency detected starting from &quot;" number="674" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                    f&quot;field '{start_field}'. Please review related field &quot;" number="675" precision="any"/><line any_info="No Anys on this line!" content="                    f&quot;relationships.&quot;," number="676" precision="empty"/><line any_info="No Anys on this line!" content="                    module_name," number="677" precision="precise"/><line any_info="No Anys on this line!" content="                    file_path," number="678" precision="precise"/><line any_info="No Anys on this line!" content="                )" number="679" precision="empty"/><line any_info="No Anys on this line!" content="" number="680" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="681" precision="precise"/><line any_info="No Anys on this line!" content="" number="682" precision="empty"/><line any_info="No Anys on this line!" content="    def _has_cycle(" number="683" precision="precise"/><line any_info="No Anys on this line!" content="        self, field: str, dependencies: Dict[str, Set[str]], visited: Set[str], path: Set[str] = None" number="684" precision="precise"/><line any_info="No Anys on this line!" content="    ) -&gt; bool:" number="685" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Detect cycles in field dependencies using DFS.&quot;&quot;&quot;" number="686" precision="empty"/><line any_info="No Anys on this line!" content="        if path is None:" number="687" precision="precise"/><line any_info="No Anys on this line!" content="            path = set()" number="688" precision="unanalyzed"/><line any_info="No Anys on this line!" content="" number="689" precision="empty"/><line any_info="No Anys on this line!" content="        if field in path:" number="690" precision="precise"/><line any_info="No Anys on this line!" content="            return True" number="691" precision="precise"/><line any_info="No Anys on this line!" content="" number="692" precision="empty"/><line any_info="No Anys on this line!" content="        if field in visited:" number="693" precision="precise"/><line any_info="No Anys on this line!" content="            return False" number="694" precision="precise"/><line any_info="No Anys on this line!" content="" number="695" precision="empty"/><line any_info="No Anys on this line!" content="        visited.add(field)" number="696" precision="precise"/><line any_info="No Anys on this line!" content="        path.add(field)" number="697" precision="precise"/><line any_info="No Anys on this line!" content="" number="698" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="        for dep_field in dependencies.get(field, []):" number="699" precision="precise"/><line any_info="No Anys on this line!" content="            if self._has_cycle(dep_field, dependencies, visited, path):" number="700" precision="precise"/><line any_info="No Anys on this line!" content="                return True" number="701" precision="precise"/><line any_info="No Anys on this line!" content="" number="702" precision="empty"/><line any_info="No Anys on this line!" content="        path.remove(field)" number="703" precision="precise"/><line any_info="No Anys on this line!" content="        return False" number="704" precision="precise"/><line any_info="No Anys on this line!" content="" number="705" precision="empty"/><line any_info="No Anys on this line!" content="    def validate_model_fields(self, module_name: str, file_path: str, class_node: ast.ClassDef, content: str) -&gt; bool:" number="706" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Validate model field definitions - catches field type mismatches.&quot;&quot;&quot;" number="707" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="708" precision="precise"/><line any_info="No Anys on this line!" content="        lines = content.split('\n')" number="709" precision="precise"/><line any_info="No Anys on this line!" content="" number="710" precision="empty"/><line any_info="No Anys on this line!" content="        # Find field definitions" number="711" precision="empty"/><line any_info="No Anys on this line!" content="        for i, line in enumerate(lines):" number="712" precision="precise"/><line any_info="No Anys on this line!" content="            # Look for field definitions with 'related=' parameter" number="713" precision="empty"/><line any_info="No Anys on this line!" content="            if 'fields.' in line and 'related=' in line:" number="714" precision="precise"/><line any_info="No Anys on this line!" content="                # Extract field type and related field" number="715" precision="empty"/><line any_info="No Anys on this line!" content="                field_match = re.search(r'fields\.(\w+)\s*\(.*related=[\'&quot;]([^\'&quot;]+)[\'&quot;]', line)" number="716" precision="precise"/><line any_info="No Anys on this line!" content="                if field_match:" number="717" precision="precise"/><line any_info="No Anys on this line!" content="                    field_type = field_match.group(1)" number="718" precision="precise"/><line any_info="No Anys on this line!" content="                    related_field = field_match.group(2)" number="719" precision="precise"/><line any_info="No Anys on this line!" content="" number="720" precision="empty"/><line any_info="No Anys on this line!" content="                    # This is the specific check that would have caught our error" number="721" precision="empty"/><line any_info="No Anys on this line!" content="                    if field_type == 'Text' and 'contact_address' in related_field:" number="722" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                        self.error(" number="723" precision="any"/><line any_info="No Anys on this line!" content="                            f&quot;Field type mismatch: Text field cannot be related to contact_address &quot;" number="724" precision="precise"/><line any_info="No Anys on this line!" content="                            f&quot;(which is typically a Char field). Line {i+1}: {line.strip()}&quot;," number="725" precision="precise"/><line any_info="No Anys on this line!" content="                            module_name," number="726" precision="precise"/><line any_info="No Anys on this line!" content="                            file_path," number="727" precision="precise"/><line any_info="No Anys on this line!" content="                        )" number="728" precision="empty"/><line any_info="No Anys on this line!" content="                        success = False" number="729" precision="precise"/><line any_info="No Anys on this line!" content="" number="730" precision="empty"/><line any_info="No Anys on this line!" content="                    # General validation for common mismatches" number="731" precision="empty"/><line any_info="No Anys on this line!" content="                    if field_type == 'Text' and any(addr in related_field for addr in ['address', 'email', 'phone']):" number="732" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                        self.warning(" number="733" precision="any"/><line any_info="No Anys on this line!" content="                            f&quot;Potential field type mismatch: Text field related to {related_field} &quot;" number="734" precision="precise"/><line any_info="No Anys on this line!" content="                            f&quot;(usually Char fields). Line {i+1}: {line.strip()}&quot;," number="735" precision="precise"/><line any_info="No Anys on this line!" content="                            module_name," number="736" precision="precise"/><line any_info="No Anys on this line!" content="                            file_path," number="737" precision="precise"/><line any_info="No Anys on this line!" content="                        )" number="738" precision="empty"/><line any_info="No Anys on this line!" content="" number="739" precision="empty"/><line any_info="No Anys on this line!" content="            # Check for compute fields without store parameter when they should have it" number="740" precision="empty"/><line any_info="No Anys on this line!" content="            if 'compute=' in line and 'store=' not in line and 'search=' not in line:" number="741" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.warning(" number="742" precision="any"/><line any_info="No Anys on this line!" content="                    f&quot;Computed field without store parameter may not be searchable. &quot; f&quot;Line {i+1}: {line.strip()}&quot;," number="743" precision="precise"/><line any_info="No Anys on this line!" content="                    module_name," number="744" precision="precise"/><line any_info="No Anys on this line!" content="                    file_path," number="745" precision="precise"/><line any_info="No Anys on this line!" content="                )" number="746" precision="empty"/><line any_info="No Anys on this line!" content="" number="747" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="748" precision="precise"/><line any_info="No Anys on this line!" content="" number="749" precision="empty"/><line any_info="No Anys on this line!" content="    def validate_xml_files(self, module_name: str) -&gt; bool:" number="750" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Validate XML files for syntax and structure.&quot;&quot;&quot;" number="751" precision="empty"/><line any_info="No Anys on this line!" content="        module_path = self.base_path / module_name" number="752" precision="precise"/><line any_info="No Anys on this line!" content="        success = True" number="753" precision="precise"/><line any_info="No Anys on this line!" content="" number="754" precision="empty"/><line any_info="No Anys on this line!" content="        for xml_file in module_path.rglob(&quot;*.xml&quot;):" number="755" precision="precise"/><line any_info="No Anys on this line!" content="            rel_path = xml_file.relative_to(module_path)" number="756" precision="precise"/><line any_info="No Anys on this line!" content="" number="757" precision="empty"/><line any_info="No Anys on this line!" content="            try:" number="758" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                tree = ET.parse(xml_file)" number="759" precision="precise"/><line any_info="No Anys on this line!" content="                root = tree.getroot()" number="760" precision="precise"/><line any_info="No Anys on this line!" content="" number="761" precision="empty"/><line any_info="No Anys on this line!" content="                # Validate Odoo XML structure" number="762" precision="empty"/><line any_info="No Anys on this line!" content="                if root.tag != 'odoo':" number="763" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.warning(f&quot;Root element should be 'odoo', got '{root.tag}'&quot;, module_name, str(rel_path))" number="764" precision="any"/><line any_info="No Anys on this line!" content="" number="765" precision="empty"/><line any_info="No Anys on this line!" content="                # Check for common XML errors" number="766" precision="empty"/><line any_info="No Anys on this line!" content="                for elem in root.iter():" number="767" precision="precise"/><line any_info="No Anys on this line!" content="                    # Check for missing 'id' attributes on records" number="768" precision="empty"/><line any_info="No Anys on this line!" content="                    if elem.tag == 'record' and 'id' not in elem.attrib:" number="769" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                        self.error(&quot;Record element missing 'id' attribute&quot;, module_name, str(rel_path))" number="770" precision="any"/><line any_info="No Anys on this line!" content="                        success = False" number="771" precision="precise"/><line any_info="No Anys on this line!" content="" number="772" precision="empty"/><line any_info="No Anys on this line!" content="                    # Check for invalid model references" number="773" precision="empty"/><line any_info="No Anys on this line!" content="                    if 'model' in elem.attrib:" number="774" precision="precise"/><line any_info="No Anys on this line!" content="                        model = elem.attrib['model']" number="775" precision="precise"/><line any_info="No Anys on this line!" content="                        if not re.match(r'^[a-z][a-z0-9]*(\.[a-z][a-z0-9]*)*$', model):" number="776" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                            self.warning(f&quot;Invalid model name format: {model}&quot;, module_name, str(rel_path))" number="777" precision="any"/><line any_info="No Anys on this line!" content="" number="778" precision="empty"/><line any_info="No Anys on this line!" content="            except ET.ParseError as e:" number="779" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(f&quot;XML parse error: {e}&quot;, module_name, str(rel_path))" number="780" precision="any"/><line any_info="No Anys on this line!" content="                success = False" number="781" precision="precise"/><line any_info="No Anys on this line!" content="            except Exception as e:" number="782" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(f&quot;Error reading XML file: {e}&quot;, module_name, str(rel_path))" number="783" precision="any"/><line any_info="No Anys on this line!" content="                success = False" number="784" precision="precise"/><line any_info="No Anys on this line!" content="" number="785" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="786" precision="precise"/><line any_info="No Anys on this line!" content="" number="787" precision="empty"/><line any_info="No Anys on this line!" content="    def validate_csv_files(self, module_name: str) -&gt; bool:" number="788" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Validate CSV files (typically security files).&quot;&quot;&quot;" number="789" precision="empty"/><line any_info="No Anys on this line!" content="        module_path = self.base_path / module_name" number="790" precision="precise"/><line any_info="No Anys on this line!" content="        success = True" number="791" precision="precise"/><line any_info="No Anys on this line!" content="" number="792" precision="empty"/><line any_info="No Anys on this line!" content="        for csv_file in module_path.rglob(&quot;*.csv&quot;):" number="793" precision="precise"/><line any_info="No Anys on this line!" content="            rel_path = csv_file.relative_to(module_path)" number="794" precision="precise"/><line any_info="No Anys on this line!" content="" number="795" precision="empty"/><line any_info="No Anys on this line!" content="            try:" number="796" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x7)&#10;Explicit (x1)" content="                with open(csv_file, 'r') as f:" number="797" precision="precise"/><line any_info="No Anys on this line!" content="                    reader = csv.reader(f)" number="798" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="                    rows = list(reader)" number="799" precision="precise"/><line any_info="No Anys on this line!" content="" number="800" precision="empty"/><line any_info="No Anys on this line!" content="                if not rows:" number="801" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.warning(&quot;Empty CSV file&quot;, module_name, str(rel_path))" number="802" precision="any"/><line any_info="No Anys on this line!" content="                    continue" number="803" precision="precise"/><line any_info="No Anys on this line!" content="" number="804" precision="empty"/><line any_info="No Anys on this line!" content="                header = rows[0]" number="805" precision="precise"/><line any_info="No Anys on this line!" content="" number="806" precision="empty"/><line any_info="No Anys on this line!" content="                # Validate access rights CSV structure" number="807" precision="empty"/><line any_info="No Anys on this line!" content="                if 'ir.model.access.csv' in str(rel_path):" number="808" precision="precise"/><line any_info="No Anys on this line!" content="                    expected_columns = [" number="809" precision="precise"/><line any_info="No Anys on this line!" content="                        'id'," number="810" precision="precise"/><line any_info="No Anys on this line!" content="                        'name'," number="811" precision="precise"/><line any_info="No Anys on this line!" content="                        'model_id:id'," number="812" precision="precise"/><line any_info="No Anys on this line!" content="                        'group_id:id'," number="813" precision="precise"/><line any_info="No Anys on this line!" content="                        'perm_read'," number="814" precision="precise"/><line any_info="No Anys on this line!" content="                        'perm_write'," number="815" precision="precise"/><line any_info="No Anys on this line!" content="                        'perm_create'," number="816" precision="precise"/><line any_info="No Anys on this line!" content="                        'perm_unlink'," number="817" precision="precise"/><line any_info="No Anys on this line!" content="                    ]" number="818" precision="empty"/><line any_info="No Anys on this line!" content="                    missing_columns = [col for col in expected_columns if col not in header]" number="819" precision="precise"/><line any_info="No Anys on this line!" content="                    if missing_columns:" number="820" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                        self.error(" number="821" precision="any"/><line any_info="No Anys on this line!" content="                            f&quot;Missing columns in access rights CSV: {', '.join(missing_columns)}. Found columns: {', '.join(header)}&quot;," number="822" precision="precise"/><line any_info="No Anys on this line!" content="                            module_name," number="823" precision="precise"/><line any_info="No Anys on this line!" content="                            str(rel_path)," number="824" precision="precise"/><line any_info="No Anys on this line!" content="                        )" number="825" precision="empty"/><line any_info="No Anys on this line!" content="                        success = False" number="826" precision="precise"/><line any_info="No Anys on this line!" content="" number="827" precision="empty"/><line any_info="No Anys on this line!" content="                    # Check data rows" number="828" precision="empty"/><line any_info="No Anys on this line!" content="                    for i, row in enumerate(rows[1:], 2):" number="829" precision="precise"/><line any_info="No Anys on this line!" content="                        if len(row) != len(header):" number="830" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                            self.error(" number="831" precision="any"/><line any_info="No Anys on this line!" content="                                f&quot;Row {i} has {len(row)} columns, expected {len(header)}&quot;, module_name, str(rel_path)" number="832" precision="precise"/><line any_info="No Anys on this line!" content="                            )" number="833" precision="empty"/><line any_info="No Anys on this line!" content="                            success = False" number="834" precision="precise"/><line any_info="No Anys on this line!" content="" number="835" precision="empty"/><line any_info="No Anys on this line!" content="            except Exception as e:" number="836" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(f&quot;Error reading CSV file: {e}&quot;, module_name, str(rel_path))" number="837" precision="any"/><line any_info="No Anys on this line!" content="                success = False" number="838" precision="precise"/><line any_info="No Anys on this line!" content="" number="839" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="840" precision="precise"/><line any_info="No Anys on this line!" content="" number="841" precision="empty"/><line any_info="No Anys on this line!" content="    def validate_module_structure(self, module_name: str) -&gt; bool:" number="842" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Validate module directory structure.&quot;&quot;&quot;" number="843" precision="empty"/><line any_info="No Anys on this line!" content="        module_path = self.base_path / module_name" number="844" precision="precise"/><line any_info="No Anys on this line!" content="        success = True" number="845" precision="precise"/><line any_info="No Anys on this line!" content="" number="846" precision="empty"/><line any_info="No Anys on this line!" content="        # Check for required __init__.py files" number="847" precision="empty"/><line any_info="No Anys on this line!" content="        required_inits = [" number="848" precision="precise"/><line any_info="No Anys on this line!" content="            module_path / &quot;__init__.py&quot;," number="849" precision="precise"/><line any_info="No Anys on this line!" content="        ]" number="850" precision="empty"/><line any_info="No Anys on this line!" content="" number="851" precision="empty"/><line any_info="No Anys on this line!" content="        if (module_path / &quot;models&quot;).exists():" number="852" precision="precise"/><line any_info="No Anys on this line!" content="            required_inits.append(module_path / &quot;models&quot; / &quot;__init__.py&quot;)" number="853" precision="precise"/><line any_info="No Anys on this line!" content="" number="854" precision="empty"/><line any_info="No Anys on this line!" content="        if (module_path / &quot;controllers&quot;).exists():" number="855" precision="precise"/><line any_info="No Anys on this line!" content="            required_inits.append(module_path / &quot;controllers&quot; / &quot;__init__.py&quot;)" number="856" precision="precise"/><line any_info="No Anys on this line!" content="" number="857" precision="empty"/><line any_info="No Anys on this line!" content="        for init_file in required_inits:" number="858" precision="precise"/><line any_info="No Anys on this line!" content="            if not init_file.exists():" number="859" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(f&quot;Missing {init_file.relative_to(module_path)}&quot;, module_name)" number="860" precision="any"/><line any_info="No Anys on this line!" content="                success = False" number="861" precision="precise"/><line any_info="No Anys on this line!" content="" number="862" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="863" precision="precise"/><line any_info="No Anys on this line!" content="" number="864" precision="empty"/><line any_info="No Anys on this line!" content="    def validate_anti_patterns(self, module_name: str) -&gt; bool:" number="865" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Task 2.6: Comprehensive anti-pattern detection for Python and Odoo.&quot;&quot;&quot;" number="866" precision="empty"/><line any_info="No Anys on this line!" content="        print(f&quot;  Checking for anti-patterns in {module_name}...&quot;)" number="867" precision="precise"/><line any_info="No Anys on this line!" content="" number="868" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="869" precision="precise"/><line any_info="No Anys on this line!" content="        module_path = self.base_path / module_name" number="870" precision="precise"/><line any_info="No Anys on this line!" content="" number="871" precision="empty"/><line any_info="No Anys on this line!" content="        # Check all Python files for anti-patterns" number="872" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="        python_files = list(module_path.rglob(&quot;*.py&quot;))" number="873" precision="precise"/><line any_info="No Anys on this line!" content="" number="874" precision="empty"/><line any_info="No Anys on this line!" content="        for py_file in python_files:" number="875" precision="precise"/><line any_info="No Anys on this line!" content="            rel_path = py_file.relative_to(module_path)" number="876" precision="precise"/><line any_info="No Anys on this line!" content="" number="877" precision="empty"/><line any_info="No Anys on this line!" content="            try:" number="878" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x7)&#10;Explicit (x1)" content="                with open(py_file, 'r', encoding='utf-8') as f:" number="879" precision="precise"/><line any_info="No Anys on this line!" content="                    content = f.read()" number="880" precision="precise"/><line any_info="No Anys on this line!" content="" number="881" precision="empty"/><line any_info="No Anys on this line!" content="                success &amp;= self._check_python_anti_patterns(module_name, str(rel_path), content)" number="882" precision="precise"/><line any_info="No Anys on this line!" content="" number="883" precision="empty"/><line any_info="No Anys on this line!" content="                # Parse AST for more complex checks" number="884" precision="empty"/><line any_info="No Anys on this line!" content="                try:" number="885" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x5)" content="                    tree = ast.parse(content)" number="886" precision="precise"/><line any_info="No Anys on this line!" content="                    success &amp;= self._check_ast_anti_patterns(module_name, str(rel_path), tree, content)" number="887" precision="precise"/><line any_info="No Anys on this line!" content="                except SyntaxError:" number="888" precision="precise"/><line any_info="No Anys on this line!" content="                    # Syntax errors already caught in validate_python_files" number="889" precision="empty"/><line any_info="No Anys on this line!" content="                    pass" number="890" precision="precise"/><line any_info="No Anys on this line!" content="" number="891" precision="empty"/><line any_info="No Anys on this line!" content="            except Exception as e:" number="892" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(f&quot;Error reading file for anti-pattern check: {e}&quot;, module_name, str(rel_path))" number="893" precision="any"/><line any_info="No Anys on this line!" content="                success = False" number="894" precision="precise"/><line any_info="No Anys on this line!" content="" number="895" precision="empty"/><line any_info="No Anys on this line!" content="        # Check module-level anti-patterns" number="896" precision="empty"/><line any_info="No Anys on this line!" content="        success &amp;= self._check_module_level_anti_patterns(module_name)" number="897" precision="precise"/><line any_info="No Anys on this line!" content="" number="898" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="899" precision="precise"/><line any_info="No Anys on this line!" content="" number="900" precision="empty"/><line any_info="No Anys on this line!" content="    def _check_python_anti_patterns(self, module_name: str, file_path: str, content: str) -&gt; bool:" number="901" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Check for common Python anti-patterns.&quot;&quot;&quot;" number="902" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="903" precision="precise"/><line any_info="No Anys on this line!" content="        lines = content.split('\n')" number="904" precision="precise"/><line any_info="No Anys on this line!" content="" number="905" precision="empty"/><line any_info="No Anys on this line!" content="        for i, line in enumerate(lines, 1):" number="906" precision="precise"/><line any_info="No Anys on this line!" content="            line_stripped = line.strip()" number="907" precision="precise"/><line any_info="No Anys on this line!" content="" number="908" precision="empty"/><line any_info="No Anys on this line!" content="            # Anti-pattern: Bare except clause" number="909" precision="empty"/><line any_info="No Anys on this line!" content="            if re.search(r'\bexcept\s*:', line):" number="910" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(" number="911" precision="any"/><line any_info="No Anys on this line!" content="                    f&quot;Bare except clause detected. Use specific exceptions. &quot; f&quot;Line {i}: {line_stripped}&quot;," number="912" precision="precise"/><line any_info="No Anys on this line!" content="                    module_name," number="913" precision="precise"/><line any_info="No Anys on this line!" content="                    file_path," number="914" precision="precise"/><line any_info="No Anys on this line!" content="                )" number="915" precision="empty"/><line any_info="No Anys on this line!" content="                success = False" number="916" precision="precise"/><line any_info="No Anys on this line!" content="" number="917" precision="empty"/><line any_info="No Anys on this line!" content="            # Anti-pattern: Print statements (should use logging)" number="918" precision="empty"/><line any_info="No Anys on this line!" content="            if re.search(r'\bprint\s*\(', line) and 'test' not in file_path.lower():" number="919" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.warning(" number="920" precision="any"/><line any_info="No Anys on this line!" content="                    f&quot;Print statement detected. Use logging instead. &quot; f&quot;Line {i}: {line_stripped}&quot;," number="921" precision="precise"/><line any_info="No Anys on this line!" content="                    module_name," number="922" precision="precise"/><line any_info="No Anys on this line!" content="                    file_path," number="923" precision="precise"/><line any_info="No Anys on this line!" content="                )" number="924" precision="empty"/><line any_info="No Anys on this line!" content="" number="925" precision="empty"/><line any_info="No Anys on this line!" content="            # Anti-pattern: Hardcoded file paths" number="926" precision="empty"/><line any_info="No Anys on this line!" content="            path_patterns = [r'[\'&quot;][A-Za-z]:[/\\]', r'[\'&quot;]/[a-z]']" number="927" precision="precise"/><line any_info="No Anys on this line!" content="            if any(re.search(pattern, line) for pattern in path_patterns):" number="928" precision="precise"/><line any_info="No Anys on this line!" content="                # Skip if it's in a comment or docstring" number="929" precision="empty"/><line any_info="No Anys on this line!" content="                if not line_stripped.startswith('#') and '&quot;&quot;&quot;' not in line:" number="930" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.warning(" number="931" precision="any"/><line any_info="No Anys on this line!" content="                        f&quot;Hardcoded file path detected. Use os.path or pathlib. &quot; f&quot;Line {i}: {line_stripped}&quot;," number="932" precision="precise"/><line any_info="No Anys on this line!" content="                        module_name," number="933" precision="precise"/><line any_info="No Anys on this line!" content="                        file_path," number="934" precision="precise"/><line any_info="No Anys on this line!" content="                    )" number="935" precision="empty"/><line any_info="No Anys on this line!" content="" number="936" precision="empty"/><line any_info="No Anys on this line!" content="            # Anti-pattern: SQL injection vulnerability" number="937" precision="empty"/><line any_info="No Anys on this line!" content="            sql_pattern = r'execute\s*\(\s*[\'&quot;][^\'&quot;]*(%).*[\'&quot;]'" number="938" precision="precise"/><line any_info="No Anys on this line!" content="            if re.search(sql_pattern, line):" number="939" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(" number="940" precision="any"/><line any_info="No Anys on this line!" content="                    f&quot;Potential SQL injection vulnerability. &quot;" number="941" precision="precise"/><line any_info="No Anys on this line!" content="                    f&quot;Use parameterized queries. &quot;" number="942" precision="empty"/><line any_info="No Anys on this line!" content="                    f&quot;Line {i}: {line_stripped}&quot;," number="943" precision="precise"/><line any_info="No Anys on this line!" content="                    module_name," number="944" precision="precise"/><line any_info="No Anys on this line!" content="                    file_path," number="945" precision="precise"/><line any_info="No Anys on this line!" content="                )" number="946" precision="empty"/><line any_info="No Anys on this line!" content="                success = False" number="947" precision="precise"/><line any_info="No Anys on this line!" content="" number="948" precision="empty"/><line any_info="No Anys on this line!" content="            # Anti-pattern: Using exec() or eval()" number="949" precision="empty"/><line any_info="No Anys on this line!" content="            if re.search(r'\b(exec|eval)\s*\(', line):" number="950" precision="precise"/><line any_info="Any Types on this line: &#10;Error (x1)" content="                func_name = re.search(r'\b(exec|eval)', line).group(1)" number="951" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(" number="952" precision="any"/><line any_info="No Anys on this line!" content="                    f&quot;Use of {func_name}() detected. &quot; f&quot;Security risk! Line {i}: {line_stripped}&quot;," number="953" precision="precise"/><line any_info="No Anys on this line!" content="                    module_name," number="954" precision="precise"/><line any_info="No Anys on this line!" content="                    file_path," number="955" precision="precise"/><line any_info="No Anys on this line!" content="                )" number="956" precision="empty"/><line any_info="No Anys on this line!" content="                success = False" number="957" precision="precise"/><line any_info="No Anys on this line!" content="" number="958" precision="empty"/><line any_info="No Anys on this line!" content="            # Anti-pattern: Hardcoded credentials or secrets" number="959" precision="empty"/><line any_info="No Anys on this line!" content="            secret_patterns = [" number="960" precision="precise"/><line any_info="No Anys on this line!" content="                r'password\s*=\s*[\'&quot;][^\'&quot;]+[\'&quot;]'," number="961" precision="precise"/><line any_info="No Anys on this line!" content="                r'secret\s*=\s*[\'&quot;][^\'&quot;]+[\'&quot;]'," number="962" precision="precise"/><line any_info="No Anys on this line!" content="                r'api_key\s*=\s*[\'&quot;][^\'&quot;]+[\'&quot;]'," number="963" precision="precise"/><line any_info="No Anys on this line!" content="                r'token\s*=\s*[\'&quot;][^\'&quot;]+[\'&quot;]'," number="964" precision="precise"/><line any_info="No Anys on this line!" content="            ]" number="965" precision="empty"/><line any_info="No Anys on this line!" content="            for pattern in secret_patterns:" number="966" precision="precise"/><line any_info="No Anys on this line!" content="                if re.search(pattern, line, re.IGNORECASE):" number="967" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.error(" number="968" precision="any"/><line any_info="No Anys on this line!" content="                        f&quot;Hardcoded credential detected. &quot; f&quot;Use environment variables. &quot; f&quot;Line {i}: [REDACTED]&quot;," number="969" precision="precise"/><line any_info="No Anys on this line!" content="                        module_name," number="970" precision="precise"/><line any_info="No Anys on this line!" content="                        file_path," number="971" precision="precise"/><line any_info="No Anys on this line!" content="                    )" number="972" precision="empty"/><line any_info="No Anys on this line!" content="                    success = False" number="973" precision="precise"/><line any_info="No Anys on this line!" content="" number="974" precision="empty"/><line any_info="No Anys on this line!" content="            # Anti-pattern: Debugging code left in production" number="975" precision="empty"/><line any_info="No Anys on this line!" content="            debug_patterns = [" number="976" precision="precise"/><line any_info="No Anys on this line!" content="                r'\bbreakpoint\s*\('," number="977" precision="precise"/><line any_info="No Anys on this line!" content="                r'\bpdb\.set_trace\s*\('," number="978" precision="precise"/><line any_info="No Anys on this line!" content="                r'\bipdb\.set_trace\s*\('," number="979" precision="precise"/><line any_info="No Anys on this line!" content="                r'import\s+pdb'," number="980" precision="precise"/><line any_info="No Anys on this line!" content="                r'import\s+ipdb'," number="981" precision="precise"/><line any_info="No Anys on this line!" content="            ]" number="982" precision="empty"/><line any_info="No Anys on this line!" content="            for pattern in debug_patterns:" number="983" precision="precise"/><line any_info="No Anys on this line!" content="                if re.search(pattern, line):" number="984" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.error(" number="985" precision="any"/><line any_info="No Anys on this line!" content="                        f&quot;Debugging code detected. Remove before production. &quot; f&quot;Line {i}: {line_stripped}&quot;," number="986" precision="precise"/><line any_info="No Anys on this line!" content="                        module_name," number="987" precision="precise"/><line any_info="No Anys on this line!" content="                        file_path," number="988" precision="precise"/><line any_info="No Anys on this line!" content="                    )" number="989" precision="empty"/><line any_info="No Anys on this line!" content="                    success = False" number="990" precision="precise"/><line any_info="No Anys on this line!" content="" number="991" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="992" precision="precise"/><line any_info="No Anys on this line!" content="" number="993" precision="empty"/><line any_info="No Anys on this line!" content="    def _check_ast_anti_patterns(self, module_name: str, file_path: str, tree: ast.AST, content: str) -&gt; bool:" number="994" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Check for AST-level anti-patterns.&quot;&quot;&quot;" number="995" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="996" precision="precise"/><line any_info="No Anys on this line!" content="        lines = content.split('\n')" number="997" precision="precise"/><line any_info="No Anys on this line!" content="" number="998" precision="empty"/><line any_info="No Anys on this line!" content="        for node in ast.walk(tree):" number="999" precision="precise"/><line any_info="No Anys on this line!" content="            # Anti-pattern: Not using 'with' to open files" number="1000" precision="empty"/><line any_info="No Anys on this line!" content="            if isinstance(node, ast.Call) and isinstance(node.func, ast.Name):" number="1001" precision="precise"/><line any_info="No Anys on this line!" content="                if node.func.id == 'open':" number="1002" precision="precise"/><line any_info="No Anys on this line!" content="                    # Check if this 'open' is inside a 'with' statement" number="1003" precision="empty"/><line any_info="No Anys on this line!" content="                    if not self._is_inside_with_statement(node, tree):" number="1004" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x14)&#10;Omitted Generics (x2)" content="                        line_num = getattr(node, 'lineno', 0)" number="1005" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                        if line_num &gt; 0:" number="1006" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                            self.warning(" number="1007" precision="any"/><line any_info="No Anys on this line!" content="                                f&quot;File opened without 'with' statement. &quot;" number="1008" precision="precise"/><line any_info="No Anys on this line!" content="                                f&quot;Use 'with open()' for proper resource &quot;" number="1009" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                                f&quot;management. Line {line_num}: &quot;" number="1010" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                                f&quot;{lines[line_num-1].strip()}&quot;," number="1011" precision="imprecise"/><line any_info="No Anys on this line!" content="                                module_name," number="1012" precision="precise"/><line any_info="No Anys on this line!" content="                                file_path," number="1013" precision="precise"/><line any_info="No Anys on this line!" content="                            )" number="1014" precision="empty"/><line any_info="No Anys on this line!" content="" number="1015" precision="empty"/><line any_info="No Anys on this line!" content="            # Anti-pattern: Mutable default arguments" number="1016" precision="empty"/><line any_info="No Anys on this line!" content="            if isinstance(node, ast.FunctionDef):" number="1017" precision="precise"/><line any_info="No Anys on this line!" content="                for default in node.args.defaults:" number="1018" precision="precise"/><line any_info="No Anys on this line!" content="                    if isinstance(default, (ast.List, ast.Dict, ast.Set)):" number="1019" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x14)&#10;Omitted Generics (x2)" content="                        line_num = getattr(default, 'lineno', 0)" number="1020" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                        if line_num &gt; 0:" number="1021" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                            self.error(" number="1022" precision="any"/><line any_info="No Anys on this line!" content="                                f&quot;Mutable default argument in function &quot;" number="1023" precision="precise"/><line any_info="No Anys on this line!" content="                                f&quot;'{node.name}'. Use None and initialize &quot;" number="1024" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                                f&quot;in function body. Line {line_num}&quot;," number="1025" precision="imprecise"/><line any_info="No Anys on this line!" content="                                module_name," number="1026" precision="precise"/><line any_info="No Anys on this line!" content="                                file_path," number="1027" precision="precise"/><line any_info="No Anys on this line!" content="                            )" number="1028" precision="empty"/><line any_info="No Anys on this line!" content="                            success = False" number="1029" precision="precise"/><line any_info="No Anys on this line!" content="" number="1030" precision="empty"/><line any_info="No Anys on this line!" content="            # Anti-pattern: Using string exceptions (deprecated)" number="1031" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="            if isinstance(node, ast.Raise) and isinstance(node.exc, ast.Str):" number="1032" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x14)&#10;Omitted Generics (x2)" content="                line_num = getattr(node, 'lineno', 0)" number="1033" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                if line_num &gt; 0:" number="1034" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.error(" number="1035" precision="any"/><line any_info="No Anys on this line!" content="                        f&quot;String exception detected. Use exception classes. &quot;" number="1036" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="                        f&quot;Line {line_num}: {lines[line_num-1].strip()}&quot;," number="1037" precision="imprecise"/><line any_info="No Anys on this line!" content="                        module_name," number="1038" precision="precise"/><line any_info="No Anys on this line!" content="                        file_path," number="1039" precision="precise"/><line any_info="No Anys on this line!" content="                    )" number="1040" precision="empty"/><line any_info="No Anys on this line!" content="                    success = False" number="1041" precision="precise"/><line any_info="No Anys on this line!" content="" number="1042" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="1043" precision="precise"/><line any_info="No Anys on this line!" content="" number="1044" precision="empty"/><line any_info="No Anys on this line!" content="    def _is_inside_with_statement(self, target_node: ast.AST, tree: ast.AST) -&gt; bool:" number="1045" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Check if a node is inside a 'with' statement.&quot;&quot;&quot;" number="1046" precision="empty"/><line any_info="No Anys on this line!" content="        for node in ast.walk(tree):" number="1047" precision="precise"/><line any_info="No Anys on this line!" content="            if isinstance(node, ast.With):" number="1048" precision="precise"/><line any_info="No Anys on this line!" content="                for child in ast.walk(node):" number="1049" precision="precise"/><line any_info="No Anys on this line!" content="                    if child is target_node:" number="1050" precision="precise"/><line any_info="No Anys on this line!" content="                        return True" number="1051" precision="precise"/><line any_info="No Anys on this line!" content="        return False" number="1052" precision="precise"/><line any_info="No Anys on this line!" content="" number="1053" precision="empty"/><line any_info="No Anys on this line!" content="    def _check_module_level_anti_patterns(self, module_name: str) -&gt; bool:" number="1054" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Check for module-level anti-patterns.&quot;&quot;&quot;" number="1055" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="1056" precision="precise"/><line any_info="No Anys on this line!" content="        module_path = self.base_path / module_name" number="1057" precision="precise"/><line any_info="No Anys on this line!" content="" number="1058" precision="empty"/><line any_info="No Anys on this line!" content="        # Enhanced __init__.py check" number="1059" precision="empty"/><line any_info="No Anys on this line!" content="        required_dirs = ['models', 'controllers', 'wizards', 'reports']" number="1060" precision="precise"/><line any_info="No Anys on this line!" content="        for dir_name in required_dirs:" number="1061" precision="precise"/><line any_info="No Anys on this line!" content="            dir_path = module_path / dir_name" number="1062" precision="precise"/><line any_info="No Anys on this line!" content="            if dir_path.exists() and dir_path.is_dir():" number="1063" precision="precise"/><line any_info="No Anys on this line!" content="                init_file = dir_path / &quot;__init__.py&quot;" number="1064" precision="precise"/><line any_info="No Anys on this line!" content="                if not init_file.exists():" number="1065" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                    self.error(" number="1066" precision="any"/><line any_info="No Anys on this line!" content="                        f&quot;Missing __init__.py in {dir_name}/ directory. &quot; f&quot;Required for Python package structure.&quot;," number="1067" precision="precise"/><line any_info="No Anys on this line!" content="                        module_name," number="1068" precision="precise"/><line any_info="No Anys on this line!" content="                    )" number="1069" precision="empty"/><line any_info="No Anys on this line!" content="                    success = False" number="1070" precision="precise"/><line any_info="No Anys on this line!" content="" number="1071" precision="empty"/><line any_info="No Anys on this line!" content="        # Check for circular imports" number="1072" precision="empty"/><line any_info="No Anys on this line!" content="        success &amp;= self._check_circular_imports(module_name)" number="1073" precision="precise"/><line any_info="No Anys on this line!" content="" number="1074" precision="empty"/><line any_info="No Anys on this line!" content="        # Check for missing dependencies in manifest" number="1075" precision="empty"/><line any_info="No Anys on this line!" content="        success &amp;= self._check_missing_dependencies(module_name)" number="1076" precision="precise"/><line any_info="No Anys on this line!" content="" number="1077" precision="empty"/><line any_info="No Anys on this line!" content="        # Check for deprecated Odoo patterns" number="1078" precision="empty"/><line any_info="No Anys on this line!" content="        success &amp;= self._check_deprecated_odoo_patterns(module_name)" number="1079" precision="precise"/><line any_info="No Anys on this line!" content="" number="1080" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="1081" precision="precise"/><line any_info="No Anys on this line!" content="" number="1082" precision="empty"/><line any_info="No Anys on this line!" content="    def _check_circular_imports(self, module_name: str) -&gt; bool:" number="1083" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Detect potential circular import issues.&quot;&quot;&quot;" number="1084" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="1085" precision="precise"/><line any_info="No Anys on this line!" content="        module_path = self.base_path / module_name" number="1086" precision="precise"/><line any_info="No Anys on this line!" content="        import_graph = {}" number="1087" precision="precise"/><line any_info="No Anys on this line!" content="" number="1088" precision="empty"/><line any_info="No Anys on this line!" content="        # Build import graph" number="1089" precision="empty"/><line any_info="No Anys on this line!" content="        for py_file in module_path.rglob(&quot;*.py&quot;):" number="1090" precision="precise"/><line any_info="No Anys on this line!" content="            rel_path = str(py_file.relative_to(module_path))" number="1091" precision="precise"/><line any_info="No Anys on this line!" content="            module_id = rel_path.replace('/', '.').replace('.py', '')" number="1092" precision="precise"/><line any_info="No Anys on this line!" content="" number="1093" precision="empty"/><line any_info="No Anys on this line!" content="            try:" number="1094" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x7)&#10;Explicit (x1)" content="                with open(py_file, 'r', encoding='utf-8') as f:" number="1095" precision="precise"/><line any_info="No Anys on this line!" content="                    content = f.read()" number="1096" precision="precise"/><line any_info="No Anys on this line!" content="" number="1097" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x5)" content="                tree = ast.parse(content)" number="1098" precision="precise"/><line any_info="No Anys on this line!" content="                imports = []" number="1099" precision="precise"/><line any_info="No Anys on this line!" content="" number="1100" precision="empty"/><line any_info="No Anys on this line!" content="                for node in ast.walk(tree):" number="1101" precision="precise"/><line any_info="No Anys on this line!" content="                    if isinstance(node, ast.Import):" number="1102" precision="precise"/><line any_info="No Anys on this line!" content="                        for alias in node.names:" number="1103" precision="precise"/><line any_info="No Anys on this line!" content="                            if alias.name.startswith(module_name):" number="1104" precision="precise"/><line any_info="No Anys on this line!" content="                                imports.append(alias.name)" number="1105" precision="precise"/><line any_info="No Anys on this line!" content="                    elif isinstance(node, ast.ImportFrom):" number="1106" precision="precise"/><line any_info="No Anys on this line!" content="                        if node.module and node.module.startswith(module_name):" number="1107" precision="precise"/><line any_info="No Anys on this line!" content="                            imports.append(node.module)" number="1108" precision="precise"/><line any_info="No Anys on this line!" content="" number="1109" precision="empty"/><line any_info="No Anys on this line!" content="                import_graph[module_id] = imports" number="1110" precision="precise"/><line any_info="No Anys on this line!" content="" number="1111" precision="empty"/><line any_info="No Anys on this line!" content="            except Exception:" number="1112" precision="precise"/><line any_info="No Anys on this line!" content="                # Skip files with syntax errors" number="1113" precision="empty"/><line any_info="No Anys on this line!" content="                continue" number="1114" precision="precise"/><line any_info="No Anys on this line!" content="" number="1115" precision="empty"/><line any_info="No Anys on this line!" content="        # Simple circular import detection" number="1116" precision="empty"/><line any_info="No Anys on this line!" content="        for module_id, imports in import_graph.items():" number="1117" precision="precise"/><line any_info="No Anys on this line!" content="            for imported in imports:" number="1118" precision="precise"/><line any_info="No Anys on this line!" content="                if imported in import_graph:" number="1119" precision="precise"/><line any_info="No Anys on this line!" content="                    if module_id in import_graph[imported]:" number="1120" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                        self.warning(f&quot;Potential circular import between &quot; f&quot;{module_id} and {imported}&quot;, module_name)" number="1121" precision="any"/><line any_info="No Anys on this line!" content="" number="1122" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="1123" precision="precise"/><line any_info="No Anys on this line!" content="" number="1124" precision="empty"/><line any_info="No Anys on this line!" content="    def _check_missing_dependencies(self, module_name: str) -&gt; bool:" number="1125" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Check for missing module dependencies.&quot;&quot;&quot;" number="1126" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="1127" precision="precise"/><line any_info="No Anys on this line!" content="        module_path = self.base_path / module_name" number="1128" precision="precise"/><line any_info="No Anys on this line!" content="        manifest_path = module_path / &quot;__manifest__.py&quot;" number="1129" precision="precise"/><line any_info="No Anys on this line!" content="" number="1130" precision="empty"/><line any_info="No Anys on this line!" content="        if not manifest_path.exists():" number="1131" precision="precise"/><line any_info="No Anys on this line!" content="            return success  # Already checked in validate_manifest" number="1132" precision="precise"/><line any_info="No Anys on this line!" content="" number="1133" precision="empty"/><line any_info="No Anys on this line!" content="        try:" number="1134" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x7)&#10;Explicit (x1)" content="            with open(manifest_path, 'r') as f:" number="1135" precision="precise"/><line any_info="No Anys on this line!" content="                manifest_content = f.read()" number="1136" precision="precise"/><line any_info="No Anys on this line!" content="" number="1137" precision="empty"/><line any_info="No Anys on this line!" content="            # Extract dependencies from manifest" number="1138" precision="empty"/><line any_info="No Anys on this line!" content="            manifest_globals = {}" number="1139" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Unannotated (x2)" content="            exec(manifest_content, manifest_globals)" number="1140" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="1141" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            if '__manifest__' in manifest_globals:" number="1142" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="                manifest = manifest_globals['__manifest__']" number="1143" precision="any"/><line any_info="No Anys on this line!" content="            else:" number="1144" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)&#10;Unannotated (x1)" content="                manifest = eval(manifest_content)" number="1145" precision="any"/><line any_info="No Anys on this line!" content="" number="1146" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Omitted Generics (x3)" content="            declared_deps = set(manifest.get('depends', []))" number="1147" precision="any"/><line any_info="No Anys on this line!" content="" number="1148" precision="empty"/><line any_info="No Anys on this line!" content="            # Find imports in Python files" number="1149" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="            used_modules = set()" number="1150" precision="precise"/><line any_info="No Anys on this line!" content="            for py_file in module_path.rglob(&quot;*.py&quot;):" number="1151" precision="precise"/><line any_info="No Anys on this line!" content="                try:" number="1152" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x7)&#10;Explicit (x1)" content="                    with open(py_file, 'r', encoding='utf-8') as f:" number="1153" precision="precise"/><line any_info="No Anys on this line!" content="                        content = f.read()" number="1154" precision="precise"/><line any_info="No Anys on this line!" content="" number="1155" precision="empty"/><line any_info="No Anys on this line!" content="                    # Look for common Odoo module imports" number="1156" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x4)" content="                    odoo_imports = re.findall(r'from\s+odoo\.addons\.(\w+)', content)" number="1157" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="                    used_modules.update(odoo_imports)" number="1158" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="1159" precision="empty"/><line any_info="No Anys on this line!" content="                except Exception:" number="1160" precision="precise"/><line any_info="No Anys on this line!" content="                    continue" number="1161" precision="precise"/><line any_info="No Anys on this line!" content="" number="1162" precision="empty"/><line any_info="No Anys on this line!" content="            # Check for missing dependencies" number="1163" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x4)&#10;Unannotated (x1)" content="            missing_deps = used_modules - declared_deps - {module_name}" number="1164" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="            for missing in missing_deps:" number="1165" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="                self.warning(f&quot;Module '{missing}' imported but not declared &quot; f&quot;in dependencies&quot;, module_name)" number="1166" precision="any"/><line any_info="No Anys on this line!" content="" number="1167" precision="empty"/><line any_info="No Anys on this line!" content="        except Exception as e:" number="1168" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.warning(f&quot;Could not check dependencies: {e}&quot;, module_name)" number="1169" precision="any"/><line any_info="No Anys on this line!" content="" number="1170" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="1171" precision="precise"/><line any_info="No Anys on this line!" content="" number="1172" precision="empty"/><line any_info="No Anys on this line!" content="    def _check_deprecated_odoo_patterns(self, module_name: str) -&gt; bool:" number="1173" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Check for deprecated Odoo development patterns.&quot;&quot;&quot;" number="1174" precision="empty"/><line any_info="No Anys on this line!" content="        success = True" number="1175" precision="precise"/><line any_info="No Anys on this line!" content="        module_path = self.base_path / module_name" number="1176" precision="precise"/><line any_info="No Anys on this line!" content="" number="1177" precision="empty"/><line any_info="No Anys on this line!" content="        for py_file in module_path.rglob(&quot;*.py&quot;):" number="1178" precision="precise"/><line any_info="No Anys on this line!" content="            rel_path = py_file.relative_to(module_path)" number="1179" precision="precise"/><line any_info="No Anys on this line!" content="" number="1180" precision="empty"/><line any_info="No Anys on this line!" content="            try:" number="1181" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x7)&#10;Explicit (x1)" content="                with open(py_file, 'r', encoding='utf-8') as f:" number="1182" precision="precise"/><line any_info="No Anys on this line!" content="                    content = f.read()" number="1183" precision="precise"/><line any_info="No Anys on this line!" content="" number="1184" precision="empty"/><line any_info="No Anys on this line!" content="                lines = content.split('\n')" number="1185" precision="precise"/><line any_info="No Anys on this line!" content="" number="1186" precision="empty"/><line any_info="No Anys on this line!" content="                for i, line in enumerate(lines, 1):" number="1187" precision="precise"/><line any_info="No Anys on this line!" content="                    # Deprecated: Using osv module" number="1188" precision="empty"/><line any_info="No Anys on this line!" content="                    osv_patterns = ['from openerp.osv import', 'import openerp.osv']" number="1189" precision="precise"/><line any_info="No Anys on this line!" content="                    if any(pattern in line for pattern in osv_patterns):" number="1190" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                        self.warning(" number="1191" precision="any"/><line any_info="No Anys on this line!" content="                            f&quot;Deprecated osv import detected. &quot; f&quot;Use odoo.models instead. Line {i}&quot;," number="1192" precision="precise"/><line any_info="No Anys on this line!" content="                            module_name," number="1193" precision="precise"/><line any_info="No Anys on this line!" content="                            str(rel_path)," number="1194" precision="precise"/><line any_info="No Anys on this line!" content="                        )" number="1195" precision="empty"/><line any_info="No Anys on this line!" content="" number="1196" precision="empty"/><line any_info="No Anys on this line!" content="                    # Deprecated: Using old API decorators" number="1197" precision="empty"/><line any_info="No Anys on this line!" content="                    if '@api.one' in line or '@api.multi' in line:" number="1198" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                        self.warning(" number="1199" precision="any"/><line any_info="No Anys on this line!" content="                            f&quot;Deprecated API decorator detected. &quot; f&quot;Use @api.model or remove. Line {i}&quot;," number="1200" precision="precise"/><line any_info="No Anys on this line!" content="                            module_name," number="1201" precision="precise"/><line any_info="No Anys on this line!" content="                            str(rel_path)," number="1202" precision="precise"/><line any_info="No Anys on this line!" content="                        )" number="1203" precision="empty"/><line any_info="No Anys on this line!" content="" number="1204" precision="empty"/><line any_info="No Anys on this line!" content="                    # Anti-pattern: Direct SQL without proper escaping" number="1205" precision="empty"/><line any_info="No Anys on this line!" content="                    sql_check = '_cr.execute' in line and '%' in line and 'format' not in line" number="1206" precision="precise"/><line any_info="No Anys on this line!" content="                    if sql_check:" number="1207" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                        self.warning(" number="1208" precision="any"/><line any_info="No Anys on this line!" content="                            f&quot;Direct SQL with string formatting. &quot; f&quot;Use cr.execute with params. Line {i}&quot;," number="1209" precision="precise"/><line any_info="No Anys on this line!" content="                            module_name," number="1210" precision="precise"/><line any_info="No Anys on this line!" content="                            str(rel_path)," number="1211" precision="precise"/><line any_info="No Anys on this line!" content="                        )" number="1212" precision="empty"/><line any_info="No Anys on this line!" content="" number="1213" precision="empty"/><line any_info="No Anys on this line!" content="                    # Anti-pattern: Using sudo() without proper consideration" number="1214" precision="empty"/><line any_info="No Anys on this line!" content="                    sudo_check = '.sudo()' in line and 'test' not in str(rel_path).lower()" number="1215" precision="precise"/><line any_info="No Anys on this line!" content="                    if sudo_check:" number="1216" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                        self.warning(" number="1217" precision="any"/><line any_info="No Anys on this line!" content="                            f&quot;sudo() usage detected. Ensure security &quot; f&quot;implications are considered. Line {i}&quot;," number="1218" precision="precise"/><line any_info="No Anys on this line!" content="                            module_name," number="1219" precision="precise"/><line any_info="No Anys on this line!" content="                            str(rel_path)," number="1220" precision="precise"/><line any_info="No Anys on this line!" content="                        )" number="1221" precision="empty"/><line any_info="No Anys on this line!" content="" number="1222" precision="empty"/><line any_info="No Anys on this line!" content="            except Exception:" number="1223" precision="precise"/><line any_info="No Anys on this line!" content="                continue" number="1224" precision="precise"/><line any_info="No Anys on this line!" content="" number="1225" precision="empty"/><line any_info="No Anys on this line!" content="        return success" number="1226" precision="precise"/><line any_info="No Anys on this line!" content="" number="1227" precision="empty"/><line any_info="No Anys on this line!" content="    def print_results(self):" number="1228" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Print validation results.&quot;&quot;&quot;" number="1229" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        print(&quot;\n&quot; + &quot;=&quot; * 60)" number="1230" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        print(&quot;ODOO MODULE VALIDATION RESULTS&quot;)" number="1231" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        print(&quot;=&quot; * 60)" number="1232" precision="any"/><line any_info="No Anys on this line!" content="" number="1233" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        if self.errors:" number="1234" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="            print(f&quot;\n❌ ERRORS ({len(self.errors)}):&quot;)" number="1235" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            for error in self.errors:" number="1236" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="                print(f&quot;  {error}&quot;)" number="1237" precision="any"/><line any_info="No Anys on this line!" content="" number="1238" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        if self.warnings:" number="1239" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="            print(f&quot;\n⚠️  WARNINGS ({len(self.warnings)}):&quot;)" number="1240" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            for warning in self.warnings:" number="1241" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="                print(f&quot;  {warning}&quot;)" number="1242" precision="any"/><line any_info="No Anys on this line!" content="" number="1243" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        if not self.errors and not self.warnings:" number="1244" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            print(&quot;\n✅ All validations passed!&quot;)" number="1245" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        elif not self.errors:" number="1246" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="            print(f&quot;\n✅ No errors found ({len(self.warnings)} warnings)&quot;)" number="1247" precision="any"/><line any_info="No Anys on this line!" content="        else:" number="1248" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="            print(f&quot;\n❌ Validation failed: {len(self.errors)} errors, {len(self.warnings)} warnings&quot;)" number="1249" precision="any"/><line any_info="No Anys on this line!" content="" number="1250" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        print(&quot;=&quot; * 60)" number="1251" precision="any"/><line any_info="No Anys on this line!" content="" number="1252" precision="empty"/><line any_info="No Anys on this line!" content="" number="1253" precision="empty"/><line any_info="No Anys on this line!" content="def main():" number="1254" precision="any"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;Main function.&quot;&quot;&quot;" number="1255" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    validator = ModuleValidator()" number="1256" precision="any"/><line any_info="No Anys on this line!" content="" number="1257" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    if len(sys.argv) &gt; 1:" number="1258" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        module_name = sys.argv[1]" number="1259" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        success = validator.validate_module(module_name)" number="1260" precision="any"/><line any_info="No Anys on this line!" content="    else:" number="1261" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        success = validator.validate_all_modules()" number="1262" precision="any"/><line any_info="No Anys on this line!" content="" number="1263" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="    validator.print_results()" number="1264" precision="any"/><line any_info="No Anys on this line!" content="" number="1265" precision="empty"/><line any_info="No Anys on this line!" content="    # Exit with error code if validation failed" number="1266" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="    sys.exit(0 if success and not validator.errors else 1)" number="1267" precision="any"/><line any_info="No Anys on this line!" content="" number="1268" precision="empty"/><line any_info="No Anys on this line!" content="" number="1269" precision="empty"/><line any_info="No Anys on this line!" content="if __name__ == &quot;__main__&quot;:" number="1270" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    main()" number="1271" precision="any"/></mypy-report-file>