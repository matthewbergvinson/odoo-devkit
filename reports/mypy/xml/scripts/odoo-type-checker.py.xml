<?xml-stylesheet type="text/xsl" href="../../mypy-html.xslt"?><mypy-report-file name="scripts/odoo-type-checker.py" module="scripts.odoo-type-checker"><line any_info="No Anys on this line!" content="#!/usr/bin/env python3" number="1" precision="empty"/><line any_info="No Anys on this line!" content="&quot;&quot;&quot;" number="2" precision="empty"/><line any_info="No Anys on this line!" content="Custom Odoo Type Checker" number="3" precision="empty"/><line any_info="No Anys on this line!" content="" number="4" precision="empty"/><line any_info="No Anys on this line!" content="This script performs additional type checking specifically for Odoo field" number="5" precision="empty"/><line any_info="No Anys on this line!" content="definitions and relationships to catch type mismatches that can cause" number="6" precision="empty"/><line any_info="No Anys on this line!" content="deployment failures." number="7" precision="empty"/><line any_info="No Anys on this line!" content="" number="8" precision="empty"/><line any_info="No Anys on this line!" content="Usage:" number="9" precision="empty"/><line any_info="No Anys on this line!" content="    python scripts/odoo-type-checker.py [module_name]" number="10" precision="empty"/><line any_info="No Anys on this line!" content="&quot;&quot;&quot;" number="11" precision="empty"/><line any_info="No Anys on this line!" content="" number="12" precision="empty"/><line any_info="No Anys on this line!" content="import ast" number="13" precision="precise"/><line any_info="No Anys on this line!" content="import re" number="14" precision="precise"/><line any_info="No Anys on this line!" content="import sys" number="15" precision="precise"/><line any_info="No Anys on this line!" content="from pathlib import Path" number="16" precision="precise"/><line any_info="No Anys on this line!" content="from typing import List, Optional" number="17" precision="precise"/><line any_info="No Anys on this line!" content="" number="18" precision="empty"/><line any_info="No Anys on this line!" content="# Common Odoo field types and their expected Python types" number="19" precision="empty"/><line any_info="No Anys on this line!" content="ODOO_FIELD_TYPES = {" number="20" precision="precise"/><line any_info="No Anys on this line!" content="    'Char': 'str'," number="21" precision="precise"/><line any_info="No Anys on this line!" content="    'Text': 'str'," number="22" precision="precise"/><line any_info="No Anys on this line!" content="    'Html': 'str'," number="23" precision="precise"/><line any_info="No Anys on this line!" content="    'Integer': 'int'," number="24" precision="precise"/><line any_info="No Anys on this line!" content="    'Float': 'float'," number="25" precision="precise"/><line any_info="No Anys on this line!" content="    'Monetary': 'float'," number="26" precision="precise"/><line any_info="No Anys on this line!" content="    'Boolean': 'bool'," number="27" precision="precise"/><line any_info="No Anys on this line!" content="    'Date': 'datetime.date'," number="28" precision="precise"/><line any_info="No Anys on this line!" content="    'Datetime': 'datetime.datetime'," number="29" precision="precise"/><line any_info="No Anys on this line!" content="    'Binary': 'bytes'," number="30" precision="precise"/><line any_info="No Anys on this line!" content="    'Selection': 'str',  # Usually string value" number="31" precision="precise"/><line any_info="No Anys on this line!" content="    'Many2one': 'recordset',  # Points to another record" number="32" precision="precise"/><line any_info="No Anys on this line!" content="    'One2many': 'recordset',  # Collection of records" number="33" precision="precise"/><line any_info="No Anys on this line!" content="    'Many2many': 'recordset',  # Collection of records" number="34" precision="precise"/><line any_info="No Anys on this line!" content="}" number="35" precision="empty"/><line any_info="No Anys on this line!" content="" number="36" precision="empty"/><line any_info="No Anys on this line!" content="# Common field type mismatches that cause deployment errors" number="37" precision="empty"/><line any_info="No Anys on this line!" content="COMMON_MISMATCHES = [" number="38" precision="precise"/><line any_info="No Anys on this line!" content="    ('Text', 'Char', 'contact_address'),  # The error we encountered" number="39" precision="precise"/><line any_info="No Anys on this line!" content="    ('Char', 'Text', 'name')," number="40" precision="precise"/><line any_info="No Anys on this line!" content="    ('Integer', 'Float', 'sequence')," number="41" precision="precise"/><line any_info="No Anys on this line!" content="    ('Float', 'Integer', 'amount')," number="42" precision="precise"/><line any_info="No Anys on this line!" content="]" number="43" precision="empty"/><line any_info="No Anys on this line!" content="" number="44" precision="empty"/><line any_info="No Anys on this line!" content="" number="45" precision="empty"/><line any_info="No Anys on this line!" content="class OdooTypeChecker:" number="46" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;Checks for Odoo-specific type mismatches and field definition issues.&quot;&quot;&quot;" number="47" precision="empty"/><line any_info="No Anys on this line!" content="" number="48" precision="empty"/><line any_info="No Anys on this line!" content="    def __init__(self):" number="49" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        self.errors = []" number="50" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        self.warnings = []" number="51" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        self.field_definitions = {}  # module -&gt; model -&gt; field -&gt; type" number="52" precision="any"/><line any_info="No Anys on this line!" content="" number="53" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="    def error(self, message: str, file_path: str, line_no: Optional[int] = None):" number="54" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Record a type checking error.&quot;&quot;&quot;" number="55" precision="empty"/><line any_info="No Anys on this line!" content="        location = f&quot;{file_path}:{line_no}&quot; if line_no else file_path" number="56" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self.errors.append(f&quot;❌ {location}: {message}&quot;)" number="57" precision="any"/><line any_info="No Anys on this line!" content="" number="58" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="    def warning(self, message: str, file_path: str, line_no: Optional[int] = None):" number="59" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Record a type checking warning.&quot;&quot;&quot;" number="60" precision="empty"/><line any_info="No Anys on this line!" content="        location = f&quot;{file_path}:{line_no}&quot; if line_no else file_path" number="61" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self.warnings.append(f&quot;⚠️  {location}: {message}&quot;)" number="62" precision="any"/><line any_info="No Anys on this line!" content="" number="63" precision="empty"/><line any_info="No Anys on this line!" content="    def check_field_definition(" number="64" precision="precise"/><line any_info="No Anys on this line!" content="        self, field_name: str, field_type: str, field_args: List[str], file_path: str, line_no: int" number="65" precision="empty"/><line any_info="No Anys on this line!" content="    ) -&gt; None:" number="66" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Check a single field definition for type consistency.&quot;&quot;&quot;" number="67" precision="empty"/><line any_info="No Anys on this line!" content="" number="68" precision="empty"/><line any_info="No Anys on this line!" content="        # Check for related field type mismatches" number="69" precision="empty"/><line any_info="No Anys on this line!" content="        if 'related=' in ' '.join(field_args):" number="70" precision="precise"/><line any_info="No Anys on this line!" content="            related_match = re.search(r&quot;related=['\&quot;]([^'\&quot;]+)['\&quot;]&quot;, ' '.join(field_args))" number="71" precision="precise"/><line any_info="No Anys on this line!" content="            if related_match:" number="72" precision="precise"/><line any_info="No Anys on this line!" content="                related_path = related_match.group(1)" number="73" precision="precise"/><line any_info="No Anys on this line!" content="                self.check_related_field_type(field_name, field_type, related_path, file_path, line_no)" number="74" precision="precise"/><line any_info="No Anys on this line!" content="" number="75" precision="empty"/><line any_info="No Anys on this line!" content="        # Check for compute field without store parameter" number="76" precision="empty"/><line any_info="No Anys on this line!" content="        compute_check = 'compute=' in ' '.join(field_args) and 'store=' not in ' '.join(field_args)" number="77" precision="precise"/><line any_info="No Anys on this line!" content="        if compute_check:" number="78" precision="precise"/><line any_info="No Anys on this line!" content="            searchable_types = ['Integer', 'Float', 'Monetary', 'Date', 'Datetime']" number="79" precision="precise"/><line any_info="No Anys on this line!" content="            if field_type in searchable_types:" number="80" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.warning(" number="81" precision="any"/><line any_info="No Anys on this line!" content="                    f&quot;Computed {field_type} field '{field_name}' without &quot; f&quot;store=True may not be searchable&quot;," number="82" precision="precise"/><line any_info="No Anys on this line!" content="                    file_path," number="83" precision="precise"/><line any_info="No Anys on this line!" content="                    line_no," number="84" precision="precise"/><line any_info="No Anys on this line!" content="                )" number="85" precision="empty"/><line any_info="No Anys on this line!" content="" number="86" precision="empty"/><line any_info="No Anys on this line!" content="        # Check for Many2one without comodel_name" number="87" precision="empty"/><line any_info="No Anys on this line!" content="        if field_type == 'Many2one':" number="88" precision="precise"/><line any_info="No Anys on this line!" content="            has_comodel = any(" number="89" precision="precise"/><line any_info="No Anys on this line!" content="                'comodel_name=' in arg or arg.startswith(&quot;'&quot;) or arg.startswith('&quot;') for arg in field_args" number="90" precision="precise"/><line any_info="No Anys on this line!" content="            )" number="91" precision="empty"/><line any_info="No Anys on this line!" content="            if not has_comodel:" number="92" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(f&quot;Many2one field '{field_name}' missing comodel_name parameter&quot;, file_path, line_no)" number="93" precision="any"/><line any_info="No Anys on this line!" content="" number="94" precision="empty"/><line any_info="No Anys on this line!" content="        # Check for Selection field without selection options" number="95" precision="empty"/><line any_info="No Anys on this line!" content="        if field_type == 'Selection':" number="96" precision="precise"/><line any_info="No Anys on this line!" content="            if not any('selection=' in arg for arg in field_args):" number="97" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(f&quot;Selection field '{field_name}' missing selection parameter&quot;, file_path, line_no)" number="98" precision="any"/><line any_info="No Anys on this line!" content="" number="99" precision="empty"/><line any_info="No Anys on this line!" content="    def check_related_field_type(" number="100" precision="precise"/><line any_info="No Anys on this line!" content="        self, field_name: str, field_type: str, related_path: str, file_path: str, line_no: int" number="101" precision="empty"/><line any_info="No Anys on this line!" content="    ) -&gt; None:" number="102" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Check if a related field type matches its source field type.&quot;&quot;&quot;" number="103" precision="empty"/><line any_info="No Anys on this line!" content="" number="104" precision="empty"/><line any_info="No Anys on this line!" content="        # Extract the final field name from the related path" number="105" precision="empty"/><line any_info="No Anys on this line!" content="        path_parts = related_path.split('.')" number="106" precision="precise"/><line any_info="No Anys on this line!" content="        if len(path_parts) &lt; 2:" number="107" precision="precise"/><line any_info="No Anys on this line!" content="            return" number="108" precision="empty"/><line any_info="No Anys on this line!" content="" number="109" precision="empty"/><line any_info="No Anys on this line!" content="        target_field = path_parts[-1]" number="110" precision="precise"/><line any_info="No Anys on this line!" content="" number="111" precision="empty"/><line any_info="No Anys on this line!" content="        # Check against known problematic patterns" number="112" precision="empty"/><line any_info="No Anys on this line!" content="        for source_type, target_type, known_field in COMMON_MISMATCHES:" number="113" precision="precise"/><line any_info="No Anys on this line!" content="            if field_type == source_type and target_field == known_field:" number="114" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(" number="115" precision="any"/><line any_info="No Anys on this line!" content="                    f&quot;Field type mismatch: '{field_name}' is {field_type} but &quot;" number="116" precision="precise"/><line any_info="No Anys on this line!" content="                    f&quot;related to '{target_field}' which is typically {target_type}. &quot;" number="117" precision="precise"/><line any_info="No Anys on this line!" content="                    f&quot;This will cause deployment errors.&quot;," number="118" precision="empty"/><line any_info="No Anys on this line!" content="                    file_path," number="119" precision="precise"/><line any_info="No Anys on this line!" content="                    line_no," number="120" precision="precise"/><line any_info="No Anys on this line!" content="                )" number="121" precision="empty"/><line any_info="No Anys on this line!" content="" number="122" precision="empty"/><line any_info="No Anys on this line!" content="        # Specific check for contact_address (the error we encountered)" number="123" precision="empty"/><line any_info="No Anys on this line!" content="        if target_field == 'contact_address' and field_type != 'Char':" number="124" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.error(" number="125" precision="any"/><line any_info="No Anys on this line!" content="                f&quot;Field '{field_name}' type mismatch: contact_address is a Char field, &quot;" number="126" precision="precise"/><line any_info="No Anys on this line!" content="                f&quot;but {field_name} is defined as {field_type}. Change to fields.Char()&quot;," number="127" precision="precise"/><line any_info="No Anys on this line!" content="                file_path," number="128" precision="precise"/><line any_info="No Anys on this line!" content="                line_no," number="129" precision="precise"/><line any_info="No Anys on this line!" content="            )" number="130" precision="empty"/><line any_info="No Anys on this line!" content="" number="131" precision="empty"/><line any_info="No Anys on this line!" content="    def parse_model_file(self, file_path: Path) -&gt; None:" number="132" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Parse a Python model file for field definitions.&quot;&quot;&quot;" number="133" precision="empty"/><line any_info="No Anys on this line!" content="        try:" number="134" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x7)&#10;Explicit (x1)" content="            with open(file_path, 'r', encoding='utf-8') as f:" number="135" precision="precise"/><line any_info="No Anys on this line!" content="                content = f.read()" number="136" precision="precise"/><line any_info="No Anys on this line!" content="" number="137" precision="empty"/><line any_info="No Anys on this line!" content="            # Parse the AST" number="138" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x5)" content="            tree = ast.parse(content)" number="139" precision="precise"/><line any_info="No Anys on this line!" content="" number="140" precision="empty"/><line any_info="No Anys on this line!" content="            # Look for field definitions" number="141" precision="empty"/><line any_info="No Anys on this line!" content="            for node in ast.walk(tree):" number="142" precision="precise"/><line any_info="No Anys on this line!" content="                if isinstance(node, ast.Assign):" number="143" precision="precise"/><line any_info="No Anys on this line!" content="                    for target in node.targets:" number="144" precision="precise"/><line any_info="No Anys on this line!" content="                        if isinstance(target, ast.Name):" number="145" precision="precise"/><line any_info="No Anys on this line!" content="                            field_name = target.id" number="146" precision="precise"/><line any_info="No Anys on this line!" content="" number="147" precision="empty"/><line any_info="No Anys on this line!" content="                            # Check if this is a field assignment" number="148" precision="empty"/><line any_info="No Anys on this line!" content="                            if isinstance(node.value, ast.Call):" number="149" precision="precise"/><line any_info="No Anys on this line!" content="                                if hasattr(node.value.func, 'attr'):" number="150" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                                    field_type = node.value.func.attr" number="151" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                                    if field_type in ODOO_FIELD_TYPES:" number="152" precision="any"/><line any_info="No Anys on this line!" content="                                        # Extract field arguments" number="153" precision="empty"/><line any_info="No Anys on this line!" content="                                        args = []" number="154" precision="precise"/><line any_info="No Anys on this line!" content="                                        for arg in node.value.args:" number="155" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                                            if isinstance(arg, ast.Constant):" number="156" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="                                                args.append(str(arg.value))" number="157" precision="any"/><line any_info="No Anys on this line!" content="" number="158" precision="empty"/><line any_info="No Anys on this line!" content="                                        for keyword in node.value.keywords:" number="159" precision="precise"/><line any_info="No Anys on this line!" content="                                            args.append(f&quot;{keyword.arg}={ast.unparse(keyword.value)}&quot;)" number="160" precision="precise"/><line any_info="No Anys on this line!" content="" number="161" precision="empty"/><line any_info="No Anys on this line!" content="                                        self.check_field_definition(" number="162" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                                            field_name, field_type, args, str(file_path), node.lineno" number="163" precision="any"/><line any_info="No Anys on this line!" content="                                        )" number="164" precision="empty"/><line any_info="No Anys on this line!" content="" number="165" precision="empty"/><line any_info="No Anys on this line!" content="        except Exception as e:" number="166" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.error(f&quot;Error parsing file: {e}&quot;, str(file_path))" number="167" precision="any"/><line any_info="No Anys on this line!" content="" number="168" precision="empty"/><line any_info="No Anys on this line!" content="    def check_module(self, module_path: Path) -&gt; None:" number="169" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Check all model files in a module.&quot;&quot;&quot;" number="170" precision="empty"/><line any_info="No Anys on this line!" content="        models_dir = module_path / 'models'" number="171" precision="precise"/><line any_info="No Anys on this line!" content="" number="172" precision="empty"/><line any_info="No Anys on this line!" content="        if not models_dir.exists():" number="173" precision="precise"/><line any_info="No Anys on this line!" content="            return" number="174" precision="empty"/><line any_info="No Anys on this line!" content="" number="175" precision="empty"/><line any_info="No Anys on this line!" content="        for model_file in models_dir.glob('*.py'):" number="176" precision="precise"/><line any_info="No Anys on this line!" content="            if model_file.name != '__init__.py':" number="177" precision="precise"/><line any_info="No Anys on this line!" content="                self.parse_model_file(model_file)" number="178" precision="precise"/><line any_info="No Anys on this line!" content="" number="179" precision="empty"/><line any_info="No Anys on this line!" content="    def run_checks(self, target_path: Optional[str] = None) -&gt; bool:" number="180" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Run type checks on specified path or all modules.&quot;&quot;&quot;" number="181" precision="empty"/><line any_info="No Anys on this line!" content="        custom_modules_dir = Path('custom_modules')" number="182" precision="precise"/><line any_info="No Anys on this line!" content="" number="183" precision="empty"/><line any_info="No Anys on this line!" content="        if not custom_modules_dir.exists():" number="184" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.error(&quot;custom_modules directory not found&quot;, str(custom_modules_dir))" number="185" precision="any"/><line any_info="No Anys on this line!" content="            return False" number="186" precision="precise"/><line any_info="No Anys on this line!" content="" number="187" precision="empty"/><line any_info="No Anys on this line!" content="        if target_path:" number="188" precision="precise"/><line any_info="No Anys on this line!" content="            module_path = custom_modules_dir / target_path" number="189" precision="precise"/><line any_info="No Anys on this line!" content="            if not module_path.exists():" number="190" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.error(f&quot;Module {target_path} not found&quot;, str(module_path))" number="191" precision="any"/><line any_info="No Anys on this line!" content="                return False" number="192" precision="precise"/><line any_info="No Anys on this line!" content="            self.check_module(module_path)" number="193" precision="precise"/><line any_info="No Anys on this line!" content="        else:" number="194" precision="empty"/><line any_info="No Anys on this line!" content="            # Check all modules" number="195" precision="empty"/><line any_info="No Anys on this line!" content="            for module_dir in custom_modules_dir.iterdir():" number="196" precision="precise"/><line any_info="No Anys on this line!" content="                if module_dir.is_dir() and not module_dir.name.startswith('.'):" number="197" precision="precise"/><line any_info="No Anys on this line!" content="                    self.check_module(module_dir)" number="198" precision="precise"/><line any_info="No Anys on this line!" content="" number="199" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return len(self.errors) == 0" number="200" precision="any"/><line any_info="No Anys on this line!" content="" number="201" precision="empty"/><line any_info="No Anys on this line!" content="    def print_results(self) -&gt; None:" number="202" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;Print the results of type checking.&quot;&quot;&quot;" number="203" precision="empty"/><line any_info="No Anys on this line!" content="        print(&quot;\n&quot; + &quot;=&quot; * 60)" number="204" precision="precise"/><line any_info="No Anys on this line!" content="        print(&quot;🔍 ODOO TYPE CHECKING RESULTS&quot;)" number="205" precision="precise"/><line any_info="No Anys on this line!" content="        print(&quot;=&quot; * 60)" number="206" precision="precise"/><line any_info="No Anys on this line!" content="" number="207" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        if self.errors:" number="208" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            print(f&quot;\n❌ ERRORS ({len(self.errors)}):&quot;)" number="209" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            for error in self.errors:" number="210" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                print(f&quot;  {error}&quot;)" number="211" precision="any"/><line any_info="No Anys on this line!" content="" number="212" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        if self.warnings:" number="213" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            print(f&quot;\n⚠️  WARNINGS ({len(self.warnings)}):&quot;)" number="214" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            for warning in self.warnings:" number="215" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                print(f&quot;  {warning}&quot;)" number="216" precision="any"/><line any_info="No Anys on this line!" content="" number="217" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        if not self.errors and not self.warnings:" number="218" precision="any"/><line any_info="No Anys on this line!" content="            print(&quot;\n✅ No Odoo type issues found!&quot;)" number="219" precision="precise"/><line any_info="No Anys on this line!" content="" number="220" precision="empty"/><line any_info="No Anys on this line!" content="        print(&quot;=&quot; * 60)" number="221" precision="precise"/><line any_info="No Anys on this line!" content="" number="222" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        summary = f&quot;Summary: {len(self.errors)} errors, {len(self.warnings)} warnings&quot;" number="223" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        if self.errors:" number="224" precision="any"/><line any_info="No Anys on this line!" content="            summary += &quot; ❌ MUST FIX BEFORE DEPLOYMENT&quot;" number="225" precision="precise"/><line any_info="No Anys on this line!" content="        else:" number="226" precision="empty"/><line any_info="No Anys on this line!" content="            summary += &quot; ✅ Ready for deployment&quot;" number="227" precision="precise"/><line any_info="No Anys on this line!" content="        print(summary)" number="228" precision="precise"/><line any_info="No Anys on this line!" content="" number="229" precision="empty"/><line any_info="No Anys on this line!" content="" number="230" precision="empty"/><line any_info="No Anys on this line!" content="def main():" number="231" precision="any"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;Main function.&quot;&quot;&quot;" number="232" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    checker = OdooTypeChecker()" number="233" precision="any"/><line any_info="No Anys on this line!" content="" number="234" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="    target_module = sys.argv[1] if len(sys.argv) &gt; 1 else None" number="235" precision="any"/><line any_info="No Anys on this line!" content="" number="236" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="    print(&quot;🔍 Running Odoo-specific type checking...&quot;)" number="237" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="    if target_module:" number="238" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        print(f&quot;📁 Checking module: {target_module}&quot;)" number="239" precision="any"/><line any_info="No Anys on this line!" content="    else:" number="240" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        print(&quot;📁 Checking all modules&quot;)" number="241" precision="any"/><line any_info="No Anys on this line!" content="" number="242" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="    success = checker.run_checks(target_module)" number="243" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="    checker.print_results()" number="244" precision="any"/><line any_info="No Anys on this line!" content="" number="245" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    sys.exit(0 if success else 1)" number="246" precision="any"/><line any_info="No Anys on this line!" content="" number="247" precision="empty"/><line any_info="No Anys on this line!" content="" number="248" precision="empty"/><line any_info="No Anys on this line!" content="if __name__ == &quot;__main__&quot;:" number="249" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    main()" number="250" precision="any"/></mypy-report-file>